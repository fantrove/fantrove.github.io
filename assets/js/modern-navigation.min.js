/**
 * ModernNavigation Ultra Edition (Optimized for Smoothness & Performance)
 * - GPU Accelerated nav show/hide via will-change and translateZ(0)
 * - Minimal event binding, ultra-lightweight and ultra-smooth
 * - All navigation, multi-language, and active state logic preserved
 * - No per-pixel or per-frame nav updates!
 * - Advanced config refresh: Always up-to-date without heavy polling
 * - SUPPORT go_url property: If present, use for navigation, but active/label/logic still uses url
 */
class ModernNavigation {
  constructor(config = {}) {
    this.cssPath = config.cssPath || '/assets/css/modern-styles.min.css';
    this.configPath = config.configPath || '/assets/json/buttons.min.json';
    this.activeClass = config.activeClass || 'active-1';
    this.navItemSelector = config.navItemSelector || '.nav-item';
    this.defaultButtonClass = config.defaultButtonClass || 'default-button';
    this.defaultLang = 'en';
    this.currentLang = localStorage.getItem('selectedLang') || this.defaultLang;

    this._initialized = false;
    this._config = null;
    this._navEl = null;
    this._lastScreenIsMobile = false;
    this._navScrollSyncEnabled = false;
    this._lastScrollY = window.scrollY;
    this._navVisible = true;
    this.SHOW_THRESHOLD = 40;
    this._isTouching = false;
    this._rafId = null;
    this._originalSetItem = localStorage.setItem;
  }

  async init() {
    if (this._initialized) return;
    try {
      ModernNavigation._preconnect(this.configPath);
      await this._loadCSS();
      this._config = await this._fetchConfig();
      const navFragment = this._createNavigationItemsFragment();
      this._injectNavigation(navFragment);
      this._navEl = document.querySelector('.bottom-nav');
      // GPU Hint for nav
      if (this._navEl) {
        this._navEl.style.willChange = 'transform';
        this._navEl.style.transform = 'translateZ(0) translateY(0%)';
      }
      this._setupNavigation();
      this._setupLanguageListener();
      this._setupStorageListener();
      this._updateActiveState();
      this._setupScrollSyncHideShow();
      this._initialized = true;
    } catch (error) {
      this._cleanup();
      throw error;
    }
  }

  static _preconnect(configPath) {
    try {
      const url = new URL(configPath, location.origin);
      if (!document.querySelector(`link[rel="preconnect"][href="${url.origin}"]`)) {
        const link = document.createElement('link');
        link.rel = 'preconnect';
        link.href = url.origin;
        document.head.appendChild(link);
      }
    } catch (_) {}
  }

  _injectNavigation(fragment) {
    if (document.querySelector('.bottom-nav')) return;
    const navEl = document.createElement('div');
    navEl.className = 'bottom-nav';
    navEl.appendChild(fragment);
    document.body.insertBefore(navEl, document.body.firstChild);
  }

  _createNavigationItemsFragment() {
    const fragment = document.createDocumentFragment();
    const config = this._config?.navigation;
    if (!config) return fragment;
    const lang = this.currentLang;
    for (let i = 0, len = config.length; i < len; ++i) {
      const item = config[i];
      const btn = document.createElement('button');
      btn.className = 'nav-item ' + (item.customClass || this.defaultButtonClass);
      btn.dataset.link = item.url;
      if (item.go_url) btn.dataset.goUrl = item.go_url;
      if (item.icon) {
        const iconSpan = document.createElement('span');
        iconSpan.innerHTML = item.icon;
        while (iconSpan.firstChild) btn.appendChild(iconSpan.firstChild);
      }
      const label = document.createElement('div');
      label.className = 'label';
      label.textContent = item[`${lang}_label`] || item.en_label || 'Missing Label';
      btn.appendChild(label);
      fragment.appendChild(btn);
    }
    return fragment;
  }

  _updateLabels() {
    if (!this._navEl || !this._config?.navigation) return;
    const config = this._config.navigation;
    const lang = this.currentLang;
    const items = this._navEl.querySelectorAll(this.navItemSelector);
    for (let i = 0, l = items.length; i < l; ++i) {
      const item = items[i];
      const link = item.dataset.link;
      const cfg = config.find(nav => nav.url === link);
      if (cfg) {
        const label = item.querySelector('.label');
        if (label) label.textContent = cfg[`${lang}_label`] || cfg.en_label || 'Missing Label';
      }
    }
  }

  _updateLanguage(newLanguage) {
    if (newLanguage && newLanguage !== this.currentLang) {
      this.currentLang = newLanguage;
      this._updateLabels();
    }
  }

  _handleClick(event) {
    const item = event.target.closest(this.navItemSelector);
    if (!item) return;
    if (event.type !== "click" || event.button !== 0) return;
    const targetLink = item.dataset.link;
    const goLink = item.dataset.goUrl;
    if ((goLink || targetLink) && !item.classList.contains(this.activeClass)) {
      if (window.location.pathname.endsWith(targetLink)) return;
      window.location.assign(goLink || targetLink);
    }
  }

  _handleScroll() {
    if (this._rafId == null) {
      this._rafId = window.requestAnimationFrame(() => {
        this._updateActiveState();
        this._rafId = null;
      });
    }
  }

  _handleStorageChange(event) {
    if (event.key === 'selectedLang') {
      this._updateLanguage(event.newValue);
    }
  }

  _updateActiveState() {
    if (!this._navEl) return;
    const currentPath = window.location.pathname;
    const items = this._navEl.querySelectorAll(this.navItemSelector);
    for (let i = 0, l = items.length; i < l; ++i) {
      const item = items[i];
      const navLink = item.dataset.link;
      if (navLink === '/' || navLink === '/index.html') {
        item.classList.toggle(this.activeClass, currentPath === '/' || currentPath.endsWith('/index.html'));
      } else {
        const normalized = navLink.endsWith('/') ? navLink : navLink + '/';
        item.classList.toggle(this.activeClass, currentPath.startsWith(normalized));
      }
    }
  }

  _setupNavigation() {
    if (!this._navEl) return;
    this._navEl.addEventListener('click', e => this._handleClick(e), { passive: true });
    window.addEventListener('scroll', e => this._handleScroll(e), { passive: true });
  }

  _setupLanguageListener() {
    window.addEventListener('languageChange', e => {
      this.currentLang = e.detail.language;
      this._updateLabels();
    });
  }

  _setupStorageListener() {
    window.addEventListener('storage', e => this._handleStorageChange(e));
    localStorage.setItem = (key, value) => {
      this._originalSetItem.call(localStorage, key, value);
      if (key === 'selectedLang') {
        this._updateLanguage(value);
      }
    };
  }

  async _loadCSS() {
    if (document.querySelector(`link[href="${this.cssPath}"]`)) return;
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = this.cssPath;
    document.head.appendChild(link);
    await new Promise(resolve => { link.onload = resolve; });
  }

  async _fetchConfig() {
    try {
      const resp = await fetch(this.configPath, { cache: 'no-store', credentials: 'same-origin' });
      if (!resp.ok) throw new Error(`HTTP error! status: ${resp.status}`);
      return await resp.json();
    } catch (e) {
      return { navigation: [] };
    }
  }

  // === ULTRA-ADVANCED SMART SCROLL SYNC HIDE/SHOW Bottom Navigation (Mobile Only, GPU Accelerated) ===
  _setupScrollSyncHideShow() {
    if (!this._navEl) return;
    this._lastScrollY = window.scrollY;
    this._navVisible = true;
    this._isTouching = false;
    window.addEventListener('resize', () => this._applyScrollNavBehaviorForScreen(), { passive: true });
    window.addEventListener('orientationchange', () => this._applyScrollNavBehaviorForScreen(), { passive: true });
    this._applyScrollNavBehaviorForScreen();
  }

  _isMobileScreen() {
    return window.innerWidth < 768;
  }

  _applyScrollNavBehaviorForScreen() {
    const isMobile = this._isMobileScreen();
    if (isMobile === this._lastScreenIsMobile) return;
    this._lastScreenIsMobile = isMobile;
    if (isMobile) {
      this._enableScrollNavSync();
    } else {
      this._disableScrollNavSync();
    }
  }

  _enableScrollNavSync() {
    if (this._navScrollSyncEnabled) return;
    window.addEventListener('scroll', e => this._onUltraScrollNav(e), { passive: true });
    window.addEventListener('touchstart', e => { this._isTouching = true; this._lastScrollY = window.scrollY; }, { passive: true });
    window.addEventListener('touchend', e => { this._isTouching = false; }, { passive: true });
    if (this._navEl) {
      this._navEl.style.willChange = 'transform';
      this._navEl.style.transform = 'translateZ(0) translateY(0%)';
      this._navEl.style.transition = 'transform 0.22s cubic-bezier(0.33,1,0.68,1)';
      this._navVisible = true;
    }
    this._navScrollSyncEnabled = true;
  }

  _disableScrollNavSync() {
    // No-op: Event listeners are anonymous and GC will collect, no need to remove
    if (this._navEl) {
      this._navEl.style.willChange = 'transform';
      this._navEl.style.transform = 'translateZ(0) translateY(0%)';
      this._navEl.style.transition = 'transform 0.22s cubic-bezier(0.33,1,0.68,1)';
      this._navVisible = true;
    }
    this._navScrollSyncEnabled = false;
  }

  _onUltraScrollNav(e) {
    if (!this._navEl) return;
    const y = window.scrollY;
    let delta = y - this._lastScrollY;
    this._lastScrollY = y;
    if (y <= this.SHOW_THRESHOLD) {
      if (!this._navVisible) this._ultraShowNav();
      return;
    }
    if (this._isTouching) {
      if (delta > 15) {
        if (this._navVisible) this._ultraHideNav();
      } else if (delta < -10) {
        if (!this._navVisible) this._ultraShowNav();
      }
    }
  }

  _ultraShowNav() {
    if (!this._navEl) return;
    this._navEl.style.willChange = 'transform';
    this._navEl.style.transform = 'translateZ(0) translateY(0%)';
    this._navEl.style.transition = 'transform 0.22s cubic-bezier(0.33,1,0.68,1)';
    if (!this._navVisible) {
      this._navVisible = true;
    }
  }

  _ultraHideNav() {
    if (!this._navEl) return;
    this._navEl.style.willChange = 'transform';
    this._navEl.style.transform = 'translateZ(0) translateY(100%)';
    this._navEl.style.transition = 'transform 0.19s cubic-bezier(0.65,0,0.35,1)';
    if (this._navVisible) {
      this._navVisible = false;
    }
  }

  _cleanup() {
    this._navEl = null;
    this._initialized = false;
    localStorage.setItem = this._originalSetItem;
  }
  destroy() {
    this._cleanup();
  }
}

(function ultraLaunchModernNav() {
  const navigation = new ModernNavigation({
    cssPath: '/assets/css/modern-styles.min.css',
    configPath: '/assets/json/template/template.min.json',
    defaultButtonClass: 'default-button'
  });
  queueMicrotask(() => {
    navigation.init().catch(error => {
      console.error('เกิดข้อผิดพลาดในการ initialize navigation:', error);
    });
  });
})();