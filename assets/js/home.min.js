// ปุ่มดูทั้งหมด (View All) - Arrow วิ่งจากขอบซ้าย (ซ่อน) -> ขวา (ซ่อน)

const viewAllConfigs = {
  emoji: {
    url: "/data/verse/discover/?type=emojis",
    labels: { th: "ดูทั้งหมด", en: "View All" }
  },
  "special-characters": {
    url: "/data/verse/discover/?type=special-characters__&page=1",
    labels: { th: "ดูทั้งหมด", en: "View All" }
  }
};

function pickLang(obj, langList) {
  if (typeof obj !== 'object' || obj === null) return obj;
  for (const lang of langList) {
    if (obj[lang]) return obj[lang];
  }
  const keys = Object.keys(obj);
  return keys.length > 0 ? obj[keys[0]] : '';
}

function getViewAllLabel(typeId) {
  const lang = localStorage.getItem('selectedLang') || 'en';
  return viewAllConfigs[typeId]?.labels?.[lang] || viewAllConfigs[typeId]?.labels?.en || "View All";
}

function getViewAllUrl(typeId) {
  return viewAllConfigs[typeId]?.url || "#";
}

function getLoadDataErrorMessage(error) {
  const lang = localStorage.getItem('selectedLang') || 'en';
  const messages = {
    th: "เกิดข้อผิดพลาด: ไม่สามารถโหลดข้อมูลหรือเทมเพลตได้",
    en: "Error: Unable to load data or templates",
  };
  return `${messages[lang] || messages.en}<br><small style="color: #ff8a8a;">${error}</small>`;
}

async function copyToClipboard(content) {
  try {
    await navigator.clipboard.writeText(content);
    return true;
  } catch (e) {
    return false;
  }
}

function createArrowSVG() {
  const svgNS = "http://www.w3.org/2000/svg";
  const svg = document.createElementNS(svgNS, "svg");
  svg.setAttribute("width", "28");
  svg.setAttribute("height", "28");
  svg.setAttribute("viewBox", "0 0 28 28");
  svg.setAttribute("fill", "none");
  svg.setAttribute("class", "btn-arrow");
  svg.innerHTML = `
    <g>
      <path d="M5 14H23" stroke="#fff" stroke-width="2.4" stroke-linecap="round"/>
      <path d="M18.5 10L23 14L18.5 18" stroke="#fff" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"/>
    </g>
  `;
  return svg;
}

function getButtonAnimWidth(btn) {
  // arrowW = 28px, arrowGap = 8px, arrowHide = 40px
  return btn.offsetWidth - 28 + 40;
}

function animateArrowAndTrail({ btn, arrowSVG, trail }) {
  // เริ่มซ่อนลูกศรซ้ายสุด
  arrowSVG.style.transition = "none";
  arrowSVG.style.transform = "translateY(-50%) translateX(-40px)";
  arrowSVG.style.opacity = "1";
  trail.style.transition = "none";
  trail.style.width = "0px";
  trail.style.opacity = "0.7";
  trail.style.display = "block";
  // ระยะทาง: ปลายขวาสุด (ลูกศรซ่อนออกไปขวา)
  const btnWidth = getButtonAnimWidth(btn);
  
  setTimeout(() => {
    arrowSVG.style.transition = "transform 0.78s cubic-bezier(.65,.05,.19,.99), opacity 0.33s";
    arrowSVG.style.transform = `translateY(-50%) translateX(${btnWidth}px)`;
    arrowSVG.style.opacity = "1";
    trail.style.transition = "width 0.78s cubic-bezier(.65,.05,.19,.99), opacity 0.38s";
    trail.style.width = (btnWidth + 40) + "px";
    trail.style.opacity = "0";
  }, 40);
  
  setTimeout(() => {
    arrowSVG.style.transition = "none";
    arrowSVG.style.transform = "translateY(-50%) translateX(-40px)";
    arrowSVG.style.opacity = "0";
    trail.style.transition = "none";
    trail.style.width = "0px";
    trail.style.opacity = "0.7";
  }, 820);
}

async function initializeHomepage() {
  const app = document.getElementById('app');
  const jsonPath = '/assets/db/db.min.json';
  const templatePath = '/assets/template-html/home-templates.html';
  
  try {
    const [dataResponse, templateResponse] = await Promise.all([
      fetch(jsonPath),
      fetch(templatePath)
    ]);
    if (!dataResponse.ok) {
      throw new Error(`ไม่สามารถโหลดไฟล์ JSON ได้ (Status: ${dataResponse.status}) จาก: ${jsonPath}`);
    }
    if (!templateResponse.ok) {
      throw new Error(`ไม่สามารถโหลดไฟล์เทมเพลตได้ (Status: ${templateResponse.status}) จาก: ${templatePath}`);
    }
    const data = await dataResponse.json();
    const templateHTML = await templateResponse.text();
    const parser = new DOMParser();
    const templateDoc = parser.parseFromString(templateHTML, 'text/html');
    const mainTemplate = templateDoc.getElementById('home-main-template');
    const categoryTemplate = templateDoc.getElementById('home-category-template');
    const cardTemplate = templateDoc.getElementById('home-item-card-template');
    if (!mainTemplate || !categoryTemplate || !cardTemplate) {
      const missing = [
        !mainTemplate ? '#home-main-template' : null,
        !categoryTemplate ? '#home-category-template' : null,
        !cardTemplate ? '#home-item-card-template' : null
      ].filter(Boolean).join(', ');
      throw new Error(`หาเทมเพลตไม่เจอ! กรุณาตรวจสอบ ID: ${missing} ในไฟล์ home-templates.html`);
    }
    renderHomePage(data, { mainTemplate, categoryTemplate, cardTemplate });
  } catch (error) {
    app.innerHTML = `<p style="color:red; font-family: monospace;">${getLoadDataErrorMessage(error.message)}</p>`;
  }
}

function renderHomePage(database, templates) {
  const app = document.getElementById('app');
  app.innerHTML = '';
  if (!database.type || !Array.isArray(database.type)) {
    throw new Error("โครงสร้างข้อมูล JSON ไม่ถูกต้อง: ไม่พบ 'database.type'");
  }
  const { mainTemplate, categoryTemplate, cardTemplate } = templates;
  const userLang = localStorage.getItem('selectedLang') || 'en';
  const langList = [userLang, 'en'];
  database.type.forEach(typeObj => {
    const typeId = typeObj.id;
    const typeName = pickLang(typeObj.name, langList) || typeId;
    const categories = (typeObj.category || []).slice(0, 4);
    const mainClone = mainTemplate.content.cloneNode(true);
    const categoriesContainer = mainClone.querySelector('[data-ref="categories-container"]');
    mainClone.querySelector('[data-ref="type-name"]').textContent = typeName;
    const viewAllBtn = mainClone.querySelector('[data-ref="view-all-btn"]');
    viewAllBtn.classList.add('button-viewall-anim');
    viewAllBtn.innerHTML = `
      <span class="btn-content">${getViewAllLabel(typeId)}</span>
      <span class="full-overlay"></span>
      <span class="arrow-trail-group">
        <span class="arrow-trail"></span>
      </span>
    `;
    const arrowGroup = viewAllBtn.querySelector('.arrow-trail-group');
    const arrowSVG = createArrowSVG();
    arrowGroup.appendChild(arrowSVG);
    
    viewAllBtn.onclick = function(e) {
      e.preventDefault();
      if (viewAllBtn.classList.contains('animating')) return;
      viewAllBtn.classList.add('animating');
      animateArrowAndTrail({
        btn: viewAllBtn,
        arrowSVG,
        trail: viewAllBtn.querySelector('.arrow-trail')
      });
      setTimeout(() => {
        viewAllBtn.classList.remove('animating');
        const url = getViewAllUrl(typeId);
        if (url && url !== "#") window.location.href = url;
      }, 820);
    };
    
    categories.forEach(category => {
      const categoryClone = categoryTemplate.content.cloneNode(true);
      const track = categoryClone.querySelector('[data-ref="track"]');
      categoryClone.querySelector('[data-ref="category-name"]').textContent = pickLang(category.name, langList) || '';
      (category.data || []).forEach(item => {
        const cardClone = cardTemplate.content.cloneNode(true);
        const card = cardClone.querySelector('.item-card');
        const itemName = pickLang(item.name, langList) || item.api || '';
        cardClone.querySelector('[data-ref="item-text"]').textContent = item.text || '';
        cardClone.querySelector('[data-ref="item-name"]').textContent = itemName;
        card.title = `คัดลอก ${itemName}`;
        card.onclick = async () => {
          if (await copyToClipboard(item.text || '')) {
            if (typeof window.showCopyNotification === 'function') {
              window.showCopyNotification({
                text: item.text,
                name: itemName,
                typeId: typeId,
                lang: userLang
              });
            }
          }
        };
        track.appendChild(cardClone);
      });
      categoriesContainer.appendChild(categoryClone);
    });
    app.appendChild(mainClone);
  });
}

initializeHomepage();