(function(global) {
  // Notification message config
  const notificationTypeMessages = {
    emoji: { th: 'คัดลอกอีโมจิแล้ว', en: 'Emoji copied' },
    "special-characters": { th: 'คัดลอกอักษรพิเศษแล้ว', en: 'Character copied' }
  };

  function getCopyNotificationMessage({ typeId = 'emoji', lang = 'en' }) {
    if (notificationTypeMessages[typeId]) {
      return notificationTypeMessages[typeId][lang] || notificationTypeMessages[typeId].en || '';
    }
    return notificationTypeMessages.emoji[lang] || notificationTypeMessages.emoji.en || '';
  }

  // Dismiss element with unified fade-out then remove
  function dismissNotification(el, opts = {}) {
    if (!el || el._cnp_dismissing) return;
    el._cnp_dismissing = true;
    if (el._cn_hideTimeout) {
      clearTimeout(el._cn_hideTimeout);
      el._cn_hideTimeout = null;
    }
    el.style.pointerEvents = 'none';
    el.style.animation = 'cnp-fadeOut 0.36s cubic-bezier(.2,.9,.3,1) forwards';
    const removeAfter = opts.duration != null ? opts.duration : 360;
    setTimeout(() => { try { if (el.parentNode) el.parentNode.removeChild(el); } catch(e){} }, removeAfter);
  }

  // Minimal premium SVG tick
  function tickSVG() {
    return `
      <svg width="32" height="32" viewBox="0 0 36 36" aria-hidden="true" focusable="false">
        <defs>
          <linearGradient id="cnpTickGrad" x1="0" x2="1">
            <stop offset="0" stop-color="#A8F0DF"/>
            <stop offset="1" stop-color="#3FC07A"/>
          </linearGradient>
        </defs>
        <circle cx="18" cy="18" r="15.2" fill="none" stroke="rgba(255,255,255,0.02)" stroke-width="1"/>
        <path class="cnp-tick-path" d="M11.8 19.6l4.6 4.5L24.3 13.2" fill="none" stroke="url(#cnpTickGrad)" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    `;
  }

  // Start tick animation by toggling class
  function triggerTickAnim(pathEl) {
    if (!pathEl) return;
    pathEl.classList.remove('cnp-tick-animating');
    void pathEl.offsetWidth;
    pathEl.classList.add('cnp-tick-animating');
  }

  function showCopyNotification({ text, name, typeId = 'emoji', lang } = {}) {
    lang = lang || localStorage.getItem('selectedLang') || 'en';
    const mainMsg = getCopyNotificationMessage({ typeId, lang });

    // Dismiss existing notifications (do NOT recycle)
    const existing = Array.from(document.querySelectorAll('.copy-notification-topcenter'));
    existing.forEach(el => dismissNotification(el));

    // Create new notification
    const n = document.createElement('div');
    n.className = 'copy-notification-topcenter';
    n.setAttribute('role', 'status');
    n.setAttribute('aria-live', 'polite');
    n.setAttribute('data-timestamp', Date.now());

    const container = document.createElement('div');
    container.className = 'copy-anim-container';

    const icon = document.createElement('div');
    icon.className = 'copy-icon';
    icon.innerHTML = tickSVG();

    const msg = document.createElement('div');
    msg.className = 'copy-message';
    msg.innerHTML = `
      <span class="copy-mainmsg">${mainMsg}</span>
      <span class="copy-emoji">${text || ''}</span>
      <span class="copy-name">${name ? '(' + name + ')' : ''}</span>
    `;

    container.appendChild(icon);
    container.appendChild(msg);
    n.appendChild(container);

    if (!document.querySelector('#copy-notification-styles')) {
      const style = document.createElement('style');
      style.id = 'copy-notification-styles';
      style.textContent = `
        :root{
          --cnp-accent-1: #A8F0DF;
          --cnp-accent-2: #3FC07A;
          --cnp-bg: rgba(18,20,22,0.58);
          --cnp-border: rgba(255,255,255,0.03);
          --cnp-text: rgba(255,255,255,0.96);
          --cnp-muted: rgba(255,255,255,0.72);
          --cnp-radius: 10px;
        }

        .copy-notification-topcenter{
          position: fixed;
          bottom: calc(90px + env(safe-area-inset-bottom, 0px));
          left: 50%;
          transform: translateX(-50%) translateZ(0);
          background: linear-gradient(180deg, rgba(255,255,255,0.01), rgba(255,255,255,0.00)), var(--cnp-bg);
          color: var(--cnp-text);
          padding: 12px 16px;
          border-radius: var(--cnp-radius);
          z-index: 15000;
          opacity: 0;
          animation: cnp-slideIn 0.36s cubic-bezier(.2,.9,.3,1) forwards;
          max-width: 360px;
          min-width: 140px;
          font-size: 14px;
          display: flex;
          align-items: center;
          gap: 12px;
          pointer-events: auto;
          user-select: none;
          font-family: inherit;
          border: 1px solid var(--cnp-border);
          backdrop-filter: blur(8px) saturate(110%);
          -webkit-backdrop-filter: blur(8px) saturate(110%);
          will-change: transform, opacity;
          transition: box-shadow 0.12s ease, transform 0.12s ease, opacity 0.12s ease;
          box-shadow: 0 8px 28px rgba(6,8,10,0.10);
        }

        .copy-notification-topcenter:focus{
          outline: none;
          box-shadow: 0 10px 36px rgba(6,10,12,0.16), 0 0 0 4px rgba(63,192,122,0.06);
          transform: translateX(-50%) scale(0.999);
        }

        .copy-anim-container{ display:flex; align-items:center; gap:12px; width:100%; min-width:0; }

        .copy-icon{
          width: 38px;
          height: 38px;
          min-width: 38px;
          min-height: 38px;
          border-radius: 9px;
          display:flex;
          align-items:center;
          justify-content:center;
          flex-shrink:0;
          background: rgba(255,255,255,0.02);
          box-shadow: 0 4px 12px rgba(5,7,8,0.08);
          animation: cnp-iconPop 0.34s cubic-bezier(.2,.9,.3,1) forwards;
          contain: layout paint;
        }

        .copy-icon svg{ width:28px; height:28px; display:block; }

        .cnp-tick-path{
          stroke-dasharray: 34;
          stroke-dashoffset: 34;
        }

        .cnp-tick-animating{
          animation: cnp-tickDraw 0.34s cubic-bezier(.3,.75,.25,1) 0.06s forwards;
        }

        .copy-message{ flex:1; display:flex; align-items:center; gap:10px; min-width:0; overflow:hidden; }

        .copy-mainmsg{
          font-weight:600;
          font-size:0.95em;
          white-space:nowrap;
          color:var(--cnp-text);
          margin-right:6px;
        }

        .copy-emoji{ font-size:1.02em; white-space:pre; }

        .copy-name{
          color:var(--cnp-muted);
          font-size:0.86em;
          margin-left:6px;
          white-space:nowrap;
          overflow:hidden;
          text-overflow:ellipsis;
          max-width:140px;
        }

        @keyframes cnp-slideIn{
          from{ opacity:0; transform: translateX(-50%) translateY(18px) scale(.996); }
          60%{ opacity:1; transform: translateX(-50%) translateY(-4px) scale(1.006); }
          to{ opacity:1; transform: translateX(-50%) translateY(0) scale(1); }
        }

        @keyframes cnp-fadeOut{
          from{ opacity:1; }
          to{ opacity:0; transform: translateX(-50%) translateY(10px) scale(.998); }
        }

        @keyframes cnp-iconPop{
          from{ transform: scale(.92); }
          70%{ transform: scale(1.03); }
          to{ transform: scale(1); }
        }

        @keyframes cnp-tickDraw{ to{ stroke-dashoffset: 0; } }

        @media (max-width:600px){
          .copy-notification-topcenter{ max-width:94vw; padding:10px 12px; font-size:13px; bottom: calc(90px + env(safe-area-inset-bottom, 0px)); }
          .copy-name{ max-width:88px; }
        }

        @media (prefers-reduced-motion: reduce){
          .copy-notification-topcenter, .copy-icon, .cnp-tick-path, .cnp-tick-animating { animation:none !important; transition:none !important; }
        }
      `;
      document.head.appendChild(style);
    }

    document.body.appendChild(n);

    // trigger tick animation consistently
    const tick = n.querySelector('.cnp-tick-path');
    if (tick) { void tick.offsetWidth; tick.classList.add('cnp-tick-animating'); }

    // accessibility: dismiss on click / Enter / Escape
    n.tabIndex = 0;
    n.onclick = n.onkeydown = (e) => {
      if (e.type === 'click' || e.key === 'Enter' || e.key === 'Escape') dismissNotification(n);
    };

    // auto remove after timeout, stored on element so dismissNotification can clear it
    n._cn_hideTimeout = setTimeout(() => { dismissNotification(n); }, 2400);
  }

  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
    module.exports = showCopyNotification;
  } else {
    global.showCopyNotification = showCopyNotification;
  }
})(typeof window !== "undefined" ? window : this);