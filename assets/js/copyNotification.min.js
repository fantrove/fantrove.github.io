(function(global) {
  // Notification message config
  const notificationTypeMessages = {
    emoji: { th: 'คัดลอกอีโมจิแล้ว', en: 'Emoji copied' },
    "special-characters": { th: 'คัดลอกอักษรพิเศษแล้ว', en: 'character copied' }
  };
  
  function getCopyNotificationMessage({ typeId = 'emoji', lang = 'en' }) {
    if (notificationTypeMessages[typeId]) {
      return notificationTypeMessages[typeId][lang] || notificationTypeMessages[typeId].en || '';
    }
    return notificationTypeMessages.emoji[lang] || notificationTypeMessages.emoji.en || '';
  }
  
  function removeExistingNotification() {
    const existing = document.querySelector('.copy-notification-topcenter');
    if (existing) {
      existing.style.animation = 'fadeOutCopy 0.44s cubic-bezier(.37,.71,.23,1) forwards';
      existing.style.pointerEvents = 'none';
      setTimeout(() => existing.remove(), 440);
    }
  }
  
  // Bigger, more visible SVG tick
  function tickSVG() {
    return `
      <svg width="36" height="36" viewBox="0 0 36 36" style="display:block" aria-hidden="true" focusable="false">
        <circle cx="18" cy="18" r="15.5" fill="none" stroke="rgba(255,255,255,0.13)" stroke-width="2.1"/>
        <filter id="tickGlow" x="-20%" y="-20%" width="140%" height="140%">
          <feDropShadow dx="0" dy="1" stdDeviation="1.7" flood-color="#43b36e" flood-opacity="0.20"/>
        </filter>
        <path class="copy-tick-path"
          d="M11.5 19.4l5.8 5.7L26.2 12.6"
          fill="none" stroke="#fff" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"
          filter="url(#tickGlow)"/>
      </svg>
    `;
  }
  
  function showCopyNotification({ text, name, typeId = 'emoji', lang } = {}) {
    removeExistingNotification();
    lang = lang || localStorage.getItem('selectedLang') || 'en';
    const mainMsg = getCopyNotificationMessage({ typeId, lang });
    
    const notification = document.createElement('div');
    notification.className = 'copy-notification-topcenter';
    notification.setAttribute('role', 'status');
    notification.setAttribute('aria-live', 'polite');
    notification.setAttribute('data-timestamp', Date.now());
    
    const animContainer = document.createElement('div');
    animContainer.className = 'copy-anim-container';
    
    const icon = document.createElement('div');
    icon.className = 'copy-icon';
    icon.innerHTML = tickSVG();
    
    const message = document.createElement('div');
    message.className = 'copy-message';
    message.innerHTML = `
      <span class="copy-mainmsg">${mainMsg}</span>
      <span class="copy-emoji">${text || ''}</span>
      <span class="copy-name">${name ? '(' + name + ')' : ''}</span>
    `;
    
    animContainer.appendChild(icon);
    animContainer.appendChild(message);
    notification.appendChild(animContainer);
    
// Style (optimized: no blur, smooth, and low resource usage)
if (!document.querySelector('#copy-notification-topcenter-styles')) {
  const style = document.createElement('style');
  style.id = 'copy-notification-topcenter-styles';
  style.textContent = `
    .copy-notification-topcenter {
      position: fixed;
      top: 22px;
      left: 50%;
      transform: translateX(-50%) translateZ(0);
      background: rgba(34,44,40,0.97);
      color: #fff;
      padding: 10px 28px 10px 14px;
      border-radius: 18px;
      box-shadow: 0 8px 32px 0 rgba(67,179,110,0.13), 0 2px 10px 0 rgba(0,0,0,0.08);
      z-index: 15000;
      opacity: 0;
      animation: slideInCopy 0.76s cubic-bezier(.18,1.04,.39,.98) forwards;
      max-width: 350px;
      min-width: 120px;
      font-size: 1.09em;
      display: flex;
      align-items: center;
      gap: 9px;
      pointer-events: auto;
      user-select: none;
      font-family: inherit;
      will-change: opacity, transform;
      border: 1.2px solid rgba(67,179,110,0.13);
      transition: box-shadow 0.22s ease, transform 0.17s ease;
      contain: layout style paint;
    }
    .copy-notification-topcenter:active,
    .copy-notification-topcenter:focus {
      box-shadow: 0 12px 38px 0 rgba(67,179,110,0.19), 0 3px 12px 0 rgba(0,0,0,0.13);
      transform: translateX(-50%) scale(0.99) translateZ(0);
    }
    .copy-anim-container {
      display: flex;
      align-items: center;
      gap: 11px;
      width: 100%;
      min-width: 0;
    }
    .copy-icon {
      width: 40px;
      height: 40px;
      min-width: 40px;
      min-height: 40px;
      border-radius: 50%;
      background: linear-gradient(135deg,rgba(67,179,110,.13) 0%,rgba(64,158,94,.17) 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      box-shadow: 0 2px 6px rgba(67,179,110,0.07);
      will-change: transform;
      overflow: hidden;
      animation: iconPopIn 0.44s cubic-bezier(.18,1.04,.39,.98) forwards;
      contain: layout paint;
    }
    .copy-icon svg {
      width: 32px;
      height: 32px;
    }
    .copy-tick-path {
      stroke-dasharray: 30;
      stroke-dashoffset: 30;
      animation: tickDraw 0.44s cubic-bezier(.37,.71,.23,1) 0.16s forwards;
    }
    .copy-message {
      flex: 1;
      display: flex;
      align-items: center;
      gap: 9px;
      min-width: 0;
      overflow: hidden;
    }
    .copy-mainmsg {
      font-weight: 600;
      font-size: 0.8em;
      margin-right: 4px;
      white-space: nowrap;
      text-shadow: 0 2px 6px rgba(67,179,110,0.08);
      letter-spacing: 0.01em;
      opacity: 0.98;
    }
    .copy-emoji {
      font-size: 1em;
      margin: 0 0.18em 0 0.15em;
      vertical-align: middle;
      white-space: pre;
      will-change: filter;
      font-variation-settings: 'wght' 650;
    }
    .copy-name {
      color: #d7ffe6;
      font-size: 0.8em;
      margin-left: 4px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      max-width: 130px;
      opacity: 0.68;
    }
    @keyframes slideInCopy {
      from {
        opacity: 0;
        transform: translateX(-50%) translateY(-54px) scale(.92) translateZ(0);
      }
      55% {
        opacity: 1;
        transform: translateX(-50%) translateY(7px) scale(1.04) translateZ(0);
      }
      82% {
        opacity: 1;
        transform: translateX(-50%) translateY(-2px) scale(0.98) translateZ(0);
      }
      to {
        opacity: 1;
        transform: translateX(-50%) translateY(0) scale(1) translateZ(0);
      }
    }
    @keyframes fadeOutCopy {
      from { opacity: 1; }
      to   { opacity: 0; }
    }
    @keyframes iconPopIn {
      from { transform: scale(.7);}
      66%  { transform: scale(1.11);}
      92%  { transform: scale(0.99);}
      to   { transform: scale(1);}
    }
    @keyframes tickDraw {
      to { stroke-dashoffset: 0;}
    }
    @media (max-width: 600px) {
      .copy-notification-topcenter {
        max-width: 97vw;
        padding: 9px 10px 9px 7px;
        font-size: 1em;
      }
      .copy-name { max-width: 64px; }
    }
  `;
  document.head.appendChild(style);
}
    
    document.body.appendChild(notification);
    
    // Accessibility: remove notification on click or focus for keyboard users
    notification.tabIndex = 0;
    notification.onclick = notification.onkeydown = (e) => {
      if (e.type === 'click' || e.key === 'Enter' || e.key === 'Escape') {
        notification.style.animation = 'fadeOutCopy 0.44s cubic-bezier(.37,.71,.23,1) forwards';
        notification.style.pointerEvents = 'none';
        setTimeout(() => {
          if (document.body.contains(notification)) notification.remove();
        }, 440);
      }
    };
    
    // Auto remove after a short time
    setTimeout(() => {
      if (document.body.contains(notification)) {
        notification.style.animation = 'fadeOutCopy 0.44s cubic-bezier(.37,.71,.23,1) forwards';
        notification.style.pointerEvents = 'none';
        setTimeout(() => {
          if (document.body.contains(notification)) notification.remove();
        }, 440);
      }
    }, 2350);
  }
  
  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
    module.exports = showCopyNotification;
  } else {
    global.showCopyNotification = showCopyNotification;
  }
})(typeof window !== "undefined" ? window : this);