/**
 * LanguageManager Ultra-Enterprise: Marker-Precise, True Replacement Edition, JSON Sync Version
 * ปรับปรุง: รองรับ enSource ("html"|"json") ใน config เพื่อกำหนดว่าจะใช้ข้อความภาษาอังกฤษจาก html หรือ json
 */

//////////////////// IndexedDB Utilities ////////////////////
const DB_NAME = "LanguageCacheDB";
const DB_STORE = "langs";
const DB_META = "meta";
const DB_VERSION = 3;
function openLangDB() {
  return new Promise((resolve, reject) => {
    const req = indexedDB.open(DB_NAME, DB_VERSION);
    req.onerror = () => reject(req.error);
    req.onupgradeneeded = () => {
      const db = req.result;
      if (!db.objectStoreNames.contains(DB_STORE)) {
        db.createObjectStore(DB_STORE, { keyPath: "key" });
      }
      if (!db.objectStoreNames.contains(DB_META)) {
        db.createObjectStore(DB_META, { keyPath: "key" });
      }
    };
    req.onsuccess = () => resolve(req.result);
  });
}
async function getLangCacheBatch(langKeys) {
  const db = await openLangDB();
  return await Promise.all(langKeys.map(langKey => {
    return new Promise(resolve => {
      const tx = db.transaction(DB_STORE, "readonly");
      const store = tx.objectStore(DB_STORE);
      const req = store.get(langKey);
      req.onsuccess = () => resolve(req.result ? req.result.data : null);
      req.onerror = () => resolve(null);
    });
  }));
}
async function setLangCacheBatch(langDatas) {
  const db = await openLangDB();
  return await Promise.all(langDatas.map(({ langKey, data }) => {
    return new Promise(resolve => {
      const tx = db.transaction(DB_STORE, "readwrite");
      const store = tx.objectStore(DB_STORE);
      store.put({ key: langKey, data, ts: Date.now() });
      tx.oncomplete = () => resolve();
      tx.onerror = () => resolve();
    });
  }));
}
async function getMeta(key) {
  const db = await openLangDB();
  return new Promise(resolve => {
    const tx = db.transaction(DB_META, "readonly");
    const store = tx.objectStore(DB_META);
    const req = store.get(key);
    req.onsuccess = () => resolve(req.result ? req.result.value : null);
    req.onerror = () => resolve(null);
  });
}
async function setMeta(key, value) {
  const db = await openLangDB();
  return new Promise(resolve => {
    const tx = db.transaction(DB_META, "readwrite");
    const store = tx.objectStore(DB_META);
    store.put({ key, value });
    tx.oncomplete = () => resolve();
    tx.onerror = () => resolve();
  });
}

//////////////////// Worker Pool ////////////////////
class WorkerPool {
  constructor(workerCode, poolSize) {
    this.workers = [];
    this.idle = [];
    this.jobs = [];
    for (let i = 0; i < poolSize; ++i) {
      const blob = new Blob([workerCode], { type: "application/javascript" });
      const url = URL.createObjectURL(blob);
      const worker = new Worker(url);
      worker.onmessage = (e) => this._onMessage(worker, e);
      this.workers.push(worker);
      this.idle.push(worker);
    }
    this.jobMap = new Map();
  }
  execute(data) {
    return new Promise((resolve, reject) => {
      const job = { data, resolve, reject };
      if (this.idle.length > 0) {
        const worker = this.idle.pop();
        this._runJob(worker, job);
      } else {
        this.jobs.push(job);
      }
    });
  }
  _runJob(worker, job) {
    this.jobMap.set(worker, job);
    worker.postMessage(job.data);
  }
  _onMessage(worker, e) {
    const job = this.jobMap.get(worker);
    this.jobMap.delete(worker);
    job.resolve(e.data);
    this.idle.push(worker);
    if (this.jobs.length > 0) {
      const nextJob = this.jobs.shift();
      this._runJob(worker, nextJob);
    }
  }
  destroy() {
    this.workers.forEach(w => w.terminate && w.terminate());
    this.workers = [];
    this.idle = [];
    this.jobs = [];
    this.jobMap.clear();
  }
}

//////////////////// Main LanguageManager ////////////////////
class LanguageManager {
  constructor() {
    this.languagesConfig = {};
    this.selectedLang = "";
    this.lastSelectedLang = "";
    this.isLanguageDropdownOpen = false;
    this.languageCache = {};
    this.isUpdatingLanguage = false;
    this.isNavigating = false;
    this.mutationObserver = null;
    this.scrollPosition = 0;
    this.isInitialized = false;
    this.mutationThrottleTimeout = null;
    this.FADE_DURATION = 300;

    this.maxWorker = navigator.hardwareConcurrency ? Math.max(4, Math.floor(navigator.hardwareConcurrency * 0.9)) : 8;
    const workerCode = `
      function splitMarkers(str) {
        const regex = /(@a(?:.*?)@)|(@br)|(@strong(.*?)@)/g;
        let result = [];
        let lastIndex = 0;
        let match;
        while ((match = regex.exec(str)) !== null) {
          if (match.index > lastIndex)
            result.push({type:'text', text: str.slice(lastIndex, match.index)});
          if (match[1] && /^@a(.*?)@$/.test(match[1])) {
            const m = match[1].match(/^@a(.*?)@$/);
            result.push({
              type: 'a',
              translate: m[1] !== "",
              text: m[1]
            });
          }
          if (match[2]) result.push({type:'br'});
          if (match[3]) result.push({type:'strong', text: match[4]});
          lastIndex = regex.lastIndex;
        }
        if (lastIndex < str.length)
          result.push({type:'text', text: str.slice(lastIndex)});
        return result;
      }
      self.onmessage = function(e) {
        const { nodes, langData, batchIdx } = e.data;
        const result = [];
        for (let i=0;i<nodes.length;i++) {
          const { key } = nodes[i];
          let translation = langData[key] || '';
          let parts = splitMarkers(translation);
          result.push({ idx: i, parts });
        }
        self.postMessage({ batchIdx, result });
      };
    `;
    this.workerPool = new WorkerPool(workerCode, this.maxWorker);

    this._prefetchPromise = this.prefetchEnterprise();
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", () => this.initialize());
    } else {
      this.initialize();
    }
  }

  // ---- เพิ่ม helper สำหรับ enSource ----
  getEnSource() {
    if (
      this.languagesConfig &&
      this.languagesConfig.en &&
      typeof this.languagesConfig.en.enSource !== "undefined"
    ) {
      return this.languagesConfig.en.enSource === "json" ? "json" : "html";
    }
    return "html"; // default
  }

  // ---- JSON version/hash/etag compare & update logic ----
  async fetchWithEtagOrHash(url, cacheKey, metaKey) {
    let cachedETag = await getMeta(metaKey + ":etag");
    let cachedHash = await getMeta(metaKey + ":hash");
    let cachedVersion = await getMeta(metaKey + ":version");
    let headers = {};
    if (cachedETag) headers['If-None-Match'] = cachedETag;
    if (cachedHash) headers['If-None-Match'] = cachedHash;
    let resp = await fetch(url, {
      headers,
      cache: "reload",
      priority: "high"
    });
    if (resp.status === 304) {
      return { updated: false };
    }
    let etag = resp.headers.get('ETag');
    let version = resp.headers.get('X-Version');
    let hash = resp.headers.get('X-Hash');
    let text = await resp.text();
    let body = text;
    let hashValue = hash;
    if (!hash && window.crypto && window.crypto.subtle) {
      const buf = new TextEncoder().encode(body);
      hashValue = await window.crypto.subtle.digest('SHA-256', buf)
        .then(hashBuf => Array.from(new Uint8Array(hashBuf)).map(x => x.toString(16).padStart(2, '0')).join(''));
    }
    if (
      (etag && etag === cachedETag) ||
      (version && version === cachedVersion) ||
      (hashValue && hashValue === cachedHash)
    ) {
      return { updated: false };
    }
    if (etag) await setMeta(metaKey + ":etag", etag);
    if (hashValue) await setMeta(metaKey + ":hash", hashValue);
    if (version) await setMeta(metaKey + ":version", version);
    return { updated: true, body, etag, version, hash: hashValue };
  }

  async prefetchEnterprise() {
    if (typeof document !== "undefined" && document.head) {
      ["//cdn.jsdelivr.net", "//fonts.googleapis.com"].forEach(href => {
        if (!document.head.querySelector(`link[href^="${href}"]`)) {
          const l = document.createElement("link");
          l.rel = "preconnect";
          l.href = href;
          l.crossOrigin = "anonymous";
          document.head.appendChild(l);
        }
      });
      if (!document.head.querySelector('link[rel="preload"][as="fetch"]')) {
        const preload = document.createElement("link");
        preload.rel = "preload";
        preload.as = "fetch";
        preload.href = "/assets/json/language.min.json";
        preload.crossOrigin = "anonymous";
        document.head.appendChild(preload);
      }
    }
    let config = null;
    const localConfigRaw = localStorage.getItem('__lang_cfg');
    const sessionConfigRaw = sessionStorage.getItem('__lang_cfg');
    if (localConfigRaw) try { config = JSON.parse(localConfigRaw); } catch {}
    if (!config && sessionConfigRaw) try { config = JSON.parse(sessionConfigRaw); } catch {}

    const url = '/assets/json/language.min.json';
    const metaKey = 'langcfg';
    let needUpdate = true;
    if (config) {
      try {
        const headResp = await fetch(url, { method: "HEAD" });
        let etag = headResp.headers.get('ETag');
        let version = headResp.headers.get('X-Version');
        let hash = headResp.headers.get('X-Hash');
        let cachedETag = await getMeta(metaKey + ":etag");
        let cachedHash = await getMeta(metaKey + ":hash");
        let cachedVersion = await getMeta(metaKey + ":version");
        if (
          (etag && etag === cachedETag) ||
          (version && version === cachedVersion) ||
          (hash && hash === cachedHash)
        ) {
          needUpdate = false;
        }
      } catch (e) {}
    }
    if (needUpdate) {
      let result = await this.fetchWithEtagOrHash(url, '__lang_cfg', metaKey);
      if (result.updated && result.body) {
        config = JSON.parse(result.body);
        localStorage.setItem('__lang_cfg', JSON.stringify(config));
        sessionStorage.setItem('__lang_cfg', JSON.stringify(config));
      } else if (!config) {
        config = await fetch(url).then(r => r.json()).catch(() => null);
        if (config) {
          localStorage.setItem('__lang_cfg', JSON.stringify(config));
          sessionStorage.setItem('__lang_cfg', JSON.stringify(config));
        }
      }
    }
    if (config) {
      this.languagesConfig = config;
    }
    this.prepareAllButtonTexts();
  }

  async enterpriseLoadLang(lang) {
    if (this.languageCache[lang]) return this.languageCache[lang];

    const langKey = lang + "_v1";
    const metaKey = "lang_" + lang;
    let cacheData = await getLangCacheBatch([langKey]).then(resArr => resArr[0]);

    const url = `/assets/lang/${lang}.min.json`;
    let needUpdate = true;
    if (cacheData) {
      try {
        const headResp = await fetch(url, { method: "HEAD" });
        let etag = headResp.headers.get('ETag');
        let version = headResp.headers.get('X-Version');
        let hash = headResp.headers.get('X-Hash');
        let cachedETag = await getMeta(metaKey + ":etag");
        let cachedHash = await getMeta(metaKey + ":hash");
        let cachedVersion = await getMeta(metaKey + ":version");
        if (
          (etag && etag === cachedETag) ||
          (version && version === cachedVersion) ||
          (hash && hash === cachedHash)
        ) {
          needUpdate = false;
        }
      } catch (e) {}
    }
    let data = cacheData;
    if (needUpdate) {
      let result = await this.fetchWithEtagOrHash(url, langKey, metaKey);
      if (result.updated && result.body) {
        data = this.flattenLanguageJson(JSON.parse(result.body));
        await setLangCacheBatch([{ langKey, data }]);
      } else if (!data) {
        data = await fetch(url).then(r => r.json()).then(obj => this.flattenLanguageJson(obj)).catch(() => null);
        if (data) await setLangCacheBatch([{ langKey, data }]);
      }
    }
    if (data) this.languageCache[lang] = data;
    return data;
  }

  flattenLanguageJson(json) {
    const result = {};
    function recur(obj) {
      for (const [k, v] of Object.entries(obj)) {
        if (typeof v === 'object' && v !== null) recur(v);
        else result[k] = v;
      }
    }
    recur(json);
    return result;
  }

  // --- SVG + Text vertical alignment (gap 15px, SVG 19px) ---
  async prepareAllButtonTexts() {
    this.languageButton = document.getElementById('language-button');
    if (!this.languageButton || !this.languagesConfig) return;
    Array.from(this.languageButton.querySelectorAll('.lang-btn-txt, .lang-btn-svg')).forEach(e => e.remove());

    let flexWrap = this.languageButton.querySelector('.lang-btn-flex');
    if (!flexWrap) {
      flexWrap = document.createElement('span');
      flexWrap.className = 'lang-btn-flex';
      flexWrap.style.display = 'inline-flex';
      flexWrap.style.alignItems = 'center';
      flexWrap.style.gap = '15px';
      flexWrap.style.verticalAlign = 'middle';
      while (this.languageButton.firstChild) this.languageButton.removeChild(this.languageButton.firstChild);
      this.languageButton.appendChild(flexWrap);
    } else {
      flexWrap.innerHTML = '';
    }

    const svgWrap = document.createElement('span');
    svgWrap.className = 'lang-btn-svg';
    svgWrap.innerHTML = `<!--
category: Text
tags: [tongue, country, speech, speak, translate, communication, communicate, english, dialect, dictionary, word]
version: "1.5"
unicode: "ebbe"
-->
<svg
  xmlns="http://www.w3.org/2000/svg"
  width="18.5"
  height="18.5"
  viewBox="0 0 24 24"
  fill="none"
  stroke="#000000"
  stroke-width="1.25"
  stroke-linecap="round"
  stroke-linejoin="round"
>
  <path d="M4 5h7" />
  <path d="M9 3v2c0 4.418 -2.239 8 -5 8" />
  <path d="M5 9c0 2.144 2.952 3.908 6.7 4" />
  <path d="M12 20l4 -9l4 9" />
  <path d="M19.1 18h-6.2" />
</svg>
`;
    svgWrap.style.display = 'inline-flex';
    svgWrap.style.alignItems = 'center';
    svgWrap.style.justifyContent = 'center';

    flexWrap.appendChild(svgWrap);

    Object.entries(this.languagesConfig).forEach(([lang, config]) => {
      const span = document.createElement('span');
      span.className = 'lang-btn-txt';
      span.dataset.lang = lang;
      span.textContent = config.buttonText || 'Language';
      span.style.display = 'none';
      span.style.lineHeight = '1';
      flexWrap.appendChild(span);
    });
    this.showButtonTextForLang(this.selectedLang || 'en');
  }

  showButtonTextForLang(lang) {
    this.languageButton = document.getElementById('language-button');
    if (!this.languageButton) return;
    const flexWrap = this.languageButton.querySelector('.lang-btn-flex');
    if (!flexWrap) return;
    Array.from(flexWrap.querySelectorAll('.lang-btn-txt')).forEach(span => {
      span.style.display = (span.dataset.lang === lang) ? '' : 'none';
    });
  }
  updateLanguageSelectorUI() { this.initializeCustomLanguageSelector(); }

  detectBrowserLanguage() {
    if (!this.languagesConfig) return 'en';
    const browserLanguages = navigator.languages || [navigator.language || navigator.userLanguage];
    for (const lang of browserLanguages) {
      const langCode = lang.split('-')[0];
      if (this.languagesConfig[langCode]) return langCode;
    }
    return 'en';
  }

  async handleInitialLanguage() {
    this.storeOriginalContent();
    const urlParams = new URLSearchParams(window.location.search);
    const langFromUrl = urlParams.get('lang');
    const storedLang = localStorage.getItem('selectedLang');
    let autoLang = this.detectBrowserLanguage();
    this.selectedLang =
      (langFromUrl && this.languagesConfig[langFromUrl]) ? langFromUrl :
      (storedLang && this.languagesConfig[storedLang]) ? storedLang :
      (this.languagesConfig[autoLang] ? autoLang : 'en');
    this.showButtonTextForLang(this.selectedLang);
    if (this.selectedLang !== 'en' || this.getEnSource() === "json") {
      await this.updatePageLanguage(this.selectedLang, { updateHistory: false });
    }
  }
  async loadLanguagesConfig() {
    await this._prefetchPromise;
    if (!this.languagesConfig || !Object.keys(this.languagesConfig).length)
      throw new Error("Config ไม่ถูกต้องและโหลดใหม่ไม่ได้");
    await this.prepareAllButtonTexts();
    await this.handleInitialLanguage();
    this.updateLanguageSelectorUI();
  }
  async loadLanguageData(lang) { return await this.enterpriseLoadLang(lang); }

  async initialize() {
    if (this.isInitialized) return;
    try {
      await this.loadLanguagesConfig();
      this.observeMutations();
      this.setupNavigationHandlers();
      document.documentElement.setAttribute("lang", "");
      this.isInitialized = true;
      setTimeout(() => {
        if (document.body && document.body.style.opacity === "0") {
          document.body.style.transition = "opacity 0.28s cubic-bezier(.47,1.64,.41,.8)";
          document.body.style.opacity = "1";
        }
      }, 0);
    } catch (error) {
      console.error('Error during initialization:', error);
      this.showError('ไม่สามารถเริ่มต้นระบบได้');
      setTimeout(() => {
        if (document.body && document.body.style.opacity === "0") {
          document.body.style.opacity = "1";
        }
      }, 0);
    }
  }

  async updatePageLanguage(language, options = { updateHistory: true }) {
    if (this.isUpdatingLanguage) return;
    try {
      this.isUpdatingLanguage = true;
      this.lastSelectedLang = this.selectedLang;
      document.documentElement.setAttribute("lang", "");
      document.documentElement.setAttribute("lang", language);
      if (language === this.detectBrowserLanguage()) {
        document.documentElement.setAttribute("translate", "no");
        if (!document.querySelector('meta[name="google"][content="notranslate"]')) {
          const meta = document.createElement('meta');
          meta.name = "google";
          meta.content = "notranslate";
          document.head.appendChild(meta);
        }
      } else {
        document.documentElement.removeAttribute("translate");
        const meta = document.querySelector('meta[name="google"][content="notranslate"]');
        if (meta) { meta.remove(); }
      }
      // --- ปรับปรุง: ภาษาอังกฤษรองรับ enSource ---
      if (language === 'en') {
        if (this.getEnSource() === "json") {
          const languageData = await this.loadLanguageData("en");
          if (languageData) {
            await this.parallelStreamingTranslate(languageData);
          } else {
            await this.resetToEnglishContent();
          }
        } else {
          await this.resetToEnglishContent();
        }
      } else {
        const languageData = await this.loadLanguageData(language);
        if (languageData) {
          await this.parallelStreamingTranslate(languageData);
        } else {
          await this.resetToEnglishContent();
        }
      }
      this.selectedLang = language;
      this.showButtonTextForLang(this.selectedLang);
      if (options.updateHistory) this.updateURLAndHistory(language);
      localStorage.setItem('selectedLang', language);
    } catch (error) {
      console.error('Error updating page language:', error);
      this.showError('เกิดข้อผิดพลาดในการเปลี่ยนภาษา');
      await this.resetToEnglishContent();
    } finally {
      this.isUpdatingLanguage = false;
    }
  }

  updateURLAndHistory(language) {
    const url = new URL(window.location.href);
    if (language === 'en') url.searchParams.delete('lang');
    else url.searchParams.set('lang', language);
    const newUrl = url.toString();
    if (newUrl === window.location.href) return;
    const state = { language, lastLanguage: this.lastSelectedLang, timestamp: Date.now() };
    history.replaceState(state, '', newUrl);
  }
  setupNavigationHandlers() {
    window.addEventListener('popstate', async (event) => {
      if (this.isLanguageDropdownOpen) await this.closeLanguageDropdown();
      if (this.isNavigating) return;
      this.isNavigating = true;
      try {
        const storedLang = localStorage.getItem('selectedLang') || 'en';
        if (storedLang !== this.selectedLang) {
          await this.updatePageLanguage(storedLang, { updateHistory: false });
        }
      } finally {
        this.isNavigating = false;
      }
    });
  }

  async parallelStreamingTranslate(languageData, elements) {
    const elList = elements || Array.from(document.querySelectorAll('[data-translate]'));
    if (!elList.length) return;
    const chunkSize = Math.max(8, Math.ceil(elList.length / this.maxWorker));
    const batches = [];
    const nodeMeta = [];
    for (let i = 0; i < elList.length; i += chunkSize) {
      const batch = elList.slice(i, i + chunkSize);
      batches.push(batch);
      nodeMeta.push(batch.map(el => ({
        key: el.getAttribute('data-translate')
      })));
    }
    const jobs = nodeMeta.map((meta, i) =>
      this.workerPool.execute({ nodes: meta, langData: languageData, batchIdx: i })
    );
    const results = await Promise.all(jobs);
    for (let j = 0; j < results.length; ++j) {
      const batch = batches[j], resArr = results[j].result;
      for (let k = 0; k < resArr.length; ++k) {
        const el = batch[resArr[k].idx];
        if (!el) continue;
        const parts = resArr[k].parts;
        this._replaceDOMWithMarkerReplace(el, parts);
      }
    }
  }

  _replaceDOMWithMarkerReplace(el, parts) {
    let childNodes = Array.from(el.childNodes);
    let matchNodes = [];
    childNodes.forEach(node => {
      if (
        (node.nodeType === Node.TEXT_NODE && node.textContent.trim().length) ||
        (node.nodeType === 1 && (
          node.tagName === 'A' ||
          node.tagName === 'BR' ||
          node.tagName === 'STRONG'
        ))
      ) {
        matchNodes.push(node);
      }
    });

    let partIdx = 0, nodeIdx = 0;
    while (partIdx < parts.length || nodeIdx < matchNodes.length) {
      const marker = parts[partIdx];
      const node = matchNodes[nodeIdx];

      if (marker && node) {
        if (marker.type === 'text' && node.nodeType === Node.TEXT_NODE) {
          node.textContent = marker.text;
          partIdx++; nodeIdx++;
        } else if (marker.type === 'a' && node.nodeType === 1 && node.tagName === 'A') {
          if (marker.translate) node.textContent = marker.text;
          partIdx++; nodeIdx++;
        } else if (marker.type === 'br' && node.nodeType === 1 && node.tagName === 'BR') {
          partIdx++; nodeIdx++;
        } else if (marker.type === 'strong' && node.nodeType === 1 && node.tagName === 'STRONG') {
          node.textContent = marker.text;
          partIdx++; nodeIdx++;
        } else {
          const newNode = this._createMarkerNode(marker);
          el.insertBefore(newNode, node);
          partIdx++;
        }
      } else if (marker && !node) {
        el.appendChild(this._createMarkerNode(marker));
        partIdx++;
      } else if (!marker && node) {
        el.removeChild(node);
        nodeIdx++;
      }
    }
  }

  _createMarkerNode(marker) {
    if (marker.type === 'text') {
      return document.createTextNode(marker.text);
    } else if (marker.type === 'a') {
      const a = document.createElement('a');
      if (marker.translate) a.textContent = marker.text;
      return a;
    } else if (marker.type === 'br') {
      return document.createElement('br');
    } else if (marker.type === 'strong') {
      const s = document.createElement('strong');
      s.textContent = marker.text;
      return s;
    }
    return document.createTextNode('');
  }

  // ----------- UI/UX unchanged below -----------
  initializeCustomLanguageSelector() {
    const container = document.getElementById('language-selector-container');
    this.languageButton = document.getElementById('language-button');
    if (!this.languageButton) return;
    this.prepareAllButtonTexts();
    this.showButtonTextForLang(this.selectedLang || 'en');
    if (this.languageOverlay && this.languageOverlay.parentElement) {
      this.languageOverlay.parentElement.removeChild(this.languageOverlay);
      this.languageOverlay = null;
    }
    if (this.languageDropdown && this.languageDropdown.parentElement) {
      this.languageDropdown.parentElement.removeChild(this.languageDropdown);
      this.languageDropdown = null;
    }
    this.languageOverlay = document.createElement('div');
    this.languageOverlay.id = 'language-overlay';
    document.body.appendChild(this.languageOverlay);
    this.languageDropdown = document.createElement('div');
    this.languageDropdown.id = 'language-dropdown';
    this.languageDropdown.innerHTML = '';
    this.populateLanguageDropdown();
    document.body.appendChild(this.languageDropdown);
    this.setupEventListeners();
    this.setupDropdownScrollLock();
  }
  populateLanguageDropdown() {
    const fragment = document.createDocumentFragment();
    Object.entries(this.languagesConfig).forEach(([lang, config]) => {
      const option = document.createElement('div');
      option.className = 'language-option';
      option.textContent = config.label;
      option.dataset.language = lang;
      fragment.appendChild(option);
    });
    this.languageDropdown.innerHTML = '';
    this.languageDropdown.appendChild(fragment);
  }
  setupEventListeners() {
    if (!this.languageButton) return;
    this.languageButton.onclick = () => this.toggleLanguageDropdown();
    this.languageOverlay.onclick = () => this.closeLanguageDropdown();
    this.languageDropdown.onclick = (e) => {
      const option = e.target.closest('.language-option');
      if (option) {
        const lang = option.dataset.language;
        if (lang) this.selectLanguage(lang);
      }
    };
  }
  setupDropdownScrollLock() {
    if (!this.languageDropdown) return;
    this.languageDropdown.removeEventListener('wheel', this._dropdownWheelListener, { passive: false });
    this.languageDropdown.removeEventListener('touchstart', this._dropdownTouchStartListener);
    this.languageDropdown.removeEventListener('touchmove', this._dropdownTouchMoveListener, { passive: false });
    this._dropdownWheelListener = (e) => {
      const el = this.languageDropdown;
      const delta = e.deltaY;
      const atTop = el.scrollTop === 0;
      const atBottom = el.scrollTop + el.clientHeight >= el.scrollHeight - 1;
      if ((atTop && delta < 0) || (atBottom && delta > 0)) e.preventDefault();
      e.stopPropagation();
    };
    this.languageDropdown.addEventListener('wheel', this._dropdownWheelListener, { passive: false });
    let lastY = 0;
    this._dropdownTouchStartListener = (e) => {
      if (e.touches.length === 1) lastY = e.touches[0].clientY;
    };
    this._dropdownTouchMoveListener = (e) => {
      if (e.touches.length !== 1) return;
      const el = this.languageDropdown;
      const currentY = e.touches[0].clientY;
      const delta = lastY - currentY;
      lastY = currentY;
      const atTop = el.scrollTop === 0;
      const atBottom = el.scrollTop + el.clientHeight >= el.scrollHeight - 1;
      if ((atTop && delta < 0) || (atBottom && delta > 0)) e.preventDefault();
      e.stopPropagation();
    };
    this.languageDropdown.addEventListener('touchstart', this._dropdownTouchStartListener);
    this.languageDropdown.addEventListener('touchmove', this._dropdownTouchMoveListener, { passive: false });
  }
  toggleLanguageDropdown() {
    this.isLanguageDropdownOpen ? this.closeLanguageDropdown() : this.openLanguageDropdown();
  }
  async openLanguageDropdown() {
    if (this.isLanguageDropdownOpen) return;
    this.scrollPosition = window.scrollY || window.pageYOffset || document.documentElement.scrollTop || 0;
    this.isLanguageDropdownOpen = true;
    this.languageOverlay.style.display = 'block';
    this.languageDropdown.style.display = 'block';
    document.body.style.position = 'fixed';
    document.body.style.left = '0';
    document.body.style.right = '0';
    document.body.style.overflowY = 'scroll';
    document.body.style.top = `-${this.scrollPosition}px`;
    document.body.classList.add('scroll-lock');
    return new Promise(resolve => {
      requestAnimationFrame(() => {
        this.languageOverlay.classList.add('fade-in');
        this.languageDropdown.classList.add('fade-in');
        setTimeout(resolve, this.FADE_DURATION);
      });
    });
  }
  async closeLanguageDropdown() {
    if (!this.isLanguageDropdownOpen) return;
    const dropdownResetDelay = 80;
    return new Promise(resolve => {
      this.isLanguageDropdownOpen = false;
      this.languageOverlay.classList.remove('fade-in');
      this.languageDropdown.classList.remove('fade-in');
      this.languageOverlay.classList.add('fade-out');
      this.languageDropdown.classList.add('fade-out');
      document.body.classList.remove('scroll-lock');
      document.body.style.position = '';
      document.body.style.left = '';
      document.body.style.right = '';
      document.body.style.overflowY = '';
      document.body.style.top = '';
      window.scrollTo(0, this.scrollPosition);
      setTimeout(() => {
        if (this.languageDropdown) {
          this.languageDropdown.scrollTop = 0;
          this.languageDropdown.scrollLeft = 0;
        }
      }, this.FADE_DURATION - dropdownResetDelay);
      setTimeout(() => {
        this.languageOverlay.style.display = 'none';
        this.languageDropdown.style.display = 'none';
        this.languageOverlay.classList.remove('fade-out');
        this.languageDropdown.classList.remove('fade-out');
        resolve();
      }, this.FADE_DURATION);
    });
  }
  async selectLanguage(language) {
    if (!this.languagesConfig[language]) {
      console.warn(`ไม่รองรับภาษา: ${language} กำลังใช้ภาษาอังกฤษแทน`);
      language = 'en';
    }
    if (this.selectedLang === language && !this.isNavigating) {
      await this.closeLanguageDropdown();
      return;
    }
    this.lastSelectedLang = this.selectedLang;
    await this.updatePageLanguage(language);
    await this.closeLanguageDropdown();
  }
  storeOriginalContent() {
    document.querySelectorAll('[data-translate]').forEach(el => {
      if (!el.hasAttribute('data-original-text')) {
        el.setAttribute('data-original-text', el.textContent.trim());
      }
      if (!el.hasAttribute('data-original-style')) {
        el.setAttribute('data-original-style', el.style.cssText);
      }
    });
  }
  async resetToEnglishContent() {
    const elements = document.querySelectorAll('[data-translate]');
    const resetPromises = Array.from(elements).map(el => new Promise(resolve => {
      requestAnimationFrame(() => {
        const originalText = el.getAttribute('data-original-text');
        const originalStyle = el.getAttribute('data-original-style');
        if (originalText) {
          const workerCode = `
            function splitMarkers(str) {
              const regex = /(@a(?:.*?)@)|(@br)|(@strong(.*?)@)/g;
              let result = [];
              let lastIndex = 0;
              let match;
              while ((match = regex.exec(str)) !== null) {
                if (match.index > lastIndex)
                  result.push({type:'text', text: str.slice(lastIndex, match.index)});
                if (match[1] && /^@a(.*?)@$/.test(match[1])) {
                  const m = match[1].match(/^@a(.*?)@$/);
                  result.push({
                    type: 'a',
                    translate: m[1] !== "",
                    text: m[1]
                  });
                }
                if (match[2]) result.push({type:'br'});
                if (match[3]) result.push({type:'strong', text: match[4]});
                lastIndex = regex.lastIndex;
              }
              if (lastIndex < str.length)
                result.push({type:'text', text: str.slice(lastIndex)});
              return result;
            }
            self.onmessage = function(e) {
              self.postMessage(splitMarkers(e.data));
            }
          `;
          let w = new Worker(URL.createObjectURL(new Blob([workerCode], {type: 'application/javascript'})));
          w.onmessage = e => {
            this._replaceDOMWithMarkerReplace(el, e.data);
            w.terminate();
            resolve();
          };
          w.postMessage(originalText);
        } else {
          resolve();
        }
        if (originalStyle) {
          el.style.cssText = originalStyle;
        }
      });
    }));
    await Promise.all(resetPromises);
  }
  showError(message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'language-error';
    errorDiv.textContent = message;
    Object.assign(errorDiv.style, {
      position: 'fixed',
      top: '20px',
      right: '20px',
      backgroundColor: '#ff4444',
      color: 'white',
      padding: '10px 20px',
      borderRadius: '4px',
      zIndex: '9999',
      opacity: '0',
      transition: 'opacity 0.3s ease'
    });
    document.body.appendChild(errorDiv);
    requestAnimationFrame(() => {
      errorDiv.style.opacity = '1';
      setTimeout(() => {
        errorDiv.style.opacity = '0';
        setTimeout(() => errorDiv.remove(), this.FADE_DURATION);
      }, 3000);
    });
  }
  observeMutations() {
    if (this.mutationObserver) { this.mutationObserver.disconnect(); }
    this.mutationObserver = new MutationObserver((mutations) => {
      if (this.mutationThrottleTimeout) return;
      this.mutationThrottleTimeout = setTimeout(() => {
        let needsUpdate = false, added = [];
        mutations.forEach(mutation => {
          if (mutation.type === 'childList') {
            mutation.addedNodes.forEach(node => {
              if (node.nodeType === Node.ELEMENT_NODE) {
                const translatableElements = node.querySelectorAll('[data-translate]');
                if (translatableElements.length > 0) {
                  needsUpdate = true;
                  added.push(...translatableElements);
                  translatableElements.forEach(el => {
                    if (!el.hasAttribute('data-original-text')) {
                      el.setAttribute('data-original-text', el.textContent.trim());
                    }
                  });
                }
              }
            });
          }
        });
        if (needsUpdate && (this.selectedLang !== 'en' || this.getEnSource() === "json")) {
          this.parallelStreamingTranslate(this.languageCache[this.selectedLang], added);
        }
        this.mutationThrottleTimeout = null;
      }, 1);
    });
    this.mutationObserver.observe(document.body, { childList: true, subtree: true });
  }
  destroy() {
    if (this.languageOverlay) this.languageOverlay.remove();
    if (this.languageDropdown) this.languageDropdown.remove();
    if (this.mutationObserver) this.mutationObserver.disconnect();
    this.languageCache = {};
    this.isInitialized = false;
    this.isLanguageDropdownOpen = false;
    this.isUpdatingLanguage = false;
    this.isNavigating = false;
    if (this.workerPool) this.workerPool.destroy();
  }
}

const languageManager = new LanguageManager();
window.languageManager = languageManager;
if (typeof module !== 'undefined' && module.exports) module.exports = languageManager;