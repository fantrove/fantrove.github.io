/**
 * LanguageManager Ultra-Enterprise: Marker-Precise, True Replacement Edition, JSON Sync Version
 * ปรับปรุงเพิ่มเติม (Strict browser-language handling, no content guessing):
 * - เพิ่มการตรวจจับการเปลี่ยนภาษาของเบราว์เซอร์แบบทันที (languagechange, visibilitychange, storage sync)
 * - เพิ่มระบบ "strict browser detection" ที่แม็ปเฉพาะภาษาที่เรารองรับใน languagesConfig เท่านั้น (ไม่เดาจากเนื้อหา)
 * - ไม่ใช้การคาดคะเนภาษาโดยการอ่านข้อความหน้าเว็บเพื่อเลือกภาษาในการแปล
 * - เพิ่ม flag "explicit selection" (localStorage) — ถ้าผู้ใช้เลือกภาษาด้วยตัวเอง ระบบจะไม่เปลี่ยนภาษาจากการตรวจจับเบราว์เซอร์โดยอัตโนมัติ
 * - ยังคงตั้ง html@lang, xml:lang, body@lang, Content-Language meta, rel=alternate hreflang อย่างเข้มงวดเพื่อป้องกันการคาดคะเนจาก UA/browser
 *
 * ใช้งาน:
 * - หากต้องการให้ระบบไม่เคย override ภาษาที่ผู้ใช้เลือก ให้เมื่อเรียก selectLanguage/การเลือกจาก UI จะเซ็ต explicit flag
 * - หากต้องการให้ระบบบังคับ override เสมอ (เช่น ให้ใช้ browser language เสมอ) ให้ตั้ง localStorage.setItem('langmgr_force_browser', '1')
 *
 * หมายเหตุ:
 * - Browser/UA บางตัวอาจยังใช้ heuristics ของตัวเอง แต่การตั้ง attribute/meta เหล่านี้ช่วยลดการเดาจากเนื้อหา
 */

//////////////////// IndexedDB Utilities ////////////////////
const DB_NAME = "LanguageCacheDB";
const DB_STORE = "langs";
const DB_META = "meta";
const DB_VERSION = 3;
function openLangDB() {
  return new Promise((resolve, reject) => {
    const req = indexedDB.open(DB_NAME, DB_VERSION);
    req.onerror = () => reject(req.error);
    req.onupgradeneeded = () => {
      const db = req.result;
      if (!db.objectStoreNames.contains(DB_STORE)) {
        db.createObjectStore(DB_STORE, { keyPath: "key" });
      }
      if (!db.objectStoreNames.contains(DB_META)) {
        db.createObjectStore(DB_META, { keyPath: "key" });
      }
    };
    req.onsuccess = () => resolve(req.result);
  });
}
async function getLangCacheBatch(langKeys) {
  const db = await openLangDB();
  return await Promise.all(langKeys.map(langKey => {
    return new Promise(resolve => {
      const tx = db.transaction(DB_STORE, "readonly");
      const store = tx.objectStore(DB_STORE);
      const req = store.get(langKey);
      req.onsuccess = () => resolve(req.result ? req.result.data : null);
      req.onerror = () => resolve(null);
    });
  }));
}
async function setLangCacheBatch(langDatas) {
  const db = await openLangDB();
  return await Promise.all(langDatas.map(({ langKey, data }) => {
    return new Promise(resolve => {
      const tx = db.transaction(DB_STORE, "readwrite");
      const store = tx.objectStore(DB_STORE);
      store.put({ key: langKey, data, ts: Date.now() });
      tx.oncomplete = () => resolve();
      tx.onerror = () => resolve();
    });
  }));
}
async function getMeta(key) {
  const db = await openLangDB();
  return new Promise(resolve => {
    const tx = db.transaction(DB_META, "readonly");
    const store = tx.objectStore(DB_META);
    const req = store.get(key);
    req.onsuccess = () => resolve(req.result ? req.result.value : null);
    req.onerror = () => resolve(null);
  });
}
async function setMeta(key, value) {
  const db = await openLangDB();
  return new Promise(resolve => {
    const tx = db.transaction(DB_META, "readwrite");
    const store = tx.objectStore(DB_META);
    store.put({ key, value });
    tx.oncomplete = () => resolve();
    tx.onerror = () => resolve();
  });
}

//////////////////// Worker Pool ////////////////////
class WorkerPool {
  constructor(workerCode, poolSize) {
    this.workers = [];
    this.idle = [];
    this.jobs = [];
    for (let i = 0; i < poolSize; ++i) {
      const blob = new Blob([workerCode], { type: "application/javascript" });
      const url = URL.createObjectURL(blob);
      const worker = new Worker(url);
      worker.onmessage = (e) => this._onMessage(worker, e);
      this.workers.push(worker);
      this.idle.push(worker);
    }
    this.jobMap = new Map();
  }
  execute(data) {
    return new Promise((resolve, reject) => {
      const job = { data, resolve, reject };
      if (this.idle.length > 0) {
        const worker = this.idle.pop();
        this._runJob(worker, job);
      } else {
        this.jobs.push(job);
      }
    });
  }
  _runJob(worker, job) {
    this.jobMap.set(worker, job);
    worker.postMessage(job.data);
  }
  _onMessage(worker, e) {
    const job = this.jobMap.get(worker);
    this.jobMap.delete(worker);
    job.resolve(e.data);
    this.idle.push(worker);
    if (this.jobs.length > 0) {
      const nextJob = this.jobs.shift();
      this._runJob(worker, nextJob);
    }
  }
  destroy() {
    this.workers.forEach(w => w.terminate && w.terminate());
    this.workers = [];
    this.idle = [];
    this.jobs = [];
    this.jobMap.clear();
  }
}

//////////////////// Main LanguageManager ////////////////////
class LanguageManager {
  constructor() {
    this.languagesConfig = {};
    this._selectedLang = ""; // internal storage; expose selectedLang via getter/setter
    this.lastSelectedLang = "";
    this.isLanguageDropdownOpen = false;
    this.languageCache = {};
    this.isUpdatingLanguage = false;
    this.isNavigating = false;
    this.mutationObserver = null;
    this.scrollPosition = 0;
    this.isInitialized = false;
    this._earlyInitialized = false;
    this.mutationThrottleTimeout = null;
    this.FADE_DURATION = 300;

    // Whether to allow auto-switch based on browser detection (unless user explicitly chose)
    this.allowAutoSwitchFromBrowser = true;

    // define strict selectedLang getter/setter that enforces language attributes whenever changed
    Object.defineProperty(this, 'selectedLang', {
      get: () => this._selectedLang,
      set: (lang) => {
        const prev = this._selectedLang;
        this._selectedLang = lang;
        try {
          // enforce immediately when property changes
          this.setEnforcedLang(lang);
        } catch (e) {
          // fail-safe: ignore enforcement errors
        }
      },
      configurable: true,
      enumerable: true
    });

    this.maxWorker = navigator.hardwareConcurrency ? Math.max(4, Math.floor(navigator.hardwareConcurrency * 0.9)) : 8;
    const workerCode = `
      // Worker: รองรับ raw HTML tags + markers + svg marker (@svg@, @svg:id@) + lsvg marker (@lsvg@, @lsvg:id@) + slot marker (@slot:name@)
      function splitMarkersAndHtml(str) {
        const htmlSplit = str.split(/(<\\/?.+?>)/g);
        const parts = [];
        // capture groups:
        // (1) @lsvg(:id)?@, (2) id for lsvg
        // (3) @svg(:id)?@, (4) id for svg
        // (5) @slot:name@, (6) name
        // (7) @a...@, (8) inner, (9) @br
        // (10) @strong...@, (11) inner
        const markerRegex = /(@lsvg(?::([^@]+))?@)|(@svg(?::([^@]+))?@)|(@slot:([^@]+)@)|(@a(.*?)@)|(@br)|(@strong(.*?)@)/g;
        for (let segment of htmlSplit) {
          if (!segment) continue;
          if (/^<\\/?.+?>$/.test(segment)) {
            parts.push({ type: 'html', html: segment });
          } else {
            let lastIndex = 0;
            let m;
            while ((m = markerRegex.exec(segment)) !== null) {
              if (m.index > lastIndex) {
                parts.push({ type: 'text', text: segment.slice(lastIndex, m.index) });
              }
              if (m[1]) { // @lsvg(:id)?@
                const id = m[2] || null;
                parts.push({ type: 'lsvg', id });
              } else if (m[3]) { // @svg(:id)?@
                const id = m[4] || null;
                parts.push({ type: 'svg', id });
              } else if (m[5]) { // @slot:name@
                const name = m[6] || null;
                parts.push({ type: 'slot', name });
              } else if (m[7]) { // @a...@
                const inner = m[8] || '';
                parts.push({ type: 'a', translate: inner !== "", text: inner });
              } else if (m[9]) { // @br
                parts.push({ type: 'br' });
              } else if (m[10]) { // @strong...@
                const s = m[11] || '';
                parts.push({ type: 'strong', text: s });
              }
              lastIndex = markerRegex.lastIndex;
            }
            if (lastIndex < segment.length) {
              parts.push({ type: 'text', text: segment.slice(lastIndex) });
            }
          }
        }
        return parts;
      }
      self.onmessage = function(e) {
        const { nodes, langData, batchIdx } = e.data;
        const result = [];
        for (let i=0;i<nodes.length;i++) {
          const { key } = nodes[i];
          let translation = langData[key] || '';
          let parts = splitMarkersAndHtml(translation);
          result.push({ idx: i, parts });
        }
        self.postMessage({ batchIdx, result });
      };
    `;
    this.workerPool = new WorkerPool(workerCode, this.maxWorker);

    // start prefetch immediately (safe even if head not parsed)
    this._prefetchPromise = this.prefetchEnterprise();

    // Early initialization: run things that can/should run immediately (before DOM ready)
    try { this.initializeEarly(); } catch (e) {}

    // Finalize initialization when DOM ready (but do not block early work)
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", () => this.initialize());
    } else {
      // DOM already ready: finalize immediately
      this.initialize();
    }

    // Watch for browser language change events and visibility to re-evaluate
    try {
      if (typeof window !== 'undefined') {
        window.addEventListener('languagechange', () => this._onBrowserLanguageChange());
        document.addEventListener('visibilitychange', () => {
          if (document.visibilityState === 'visible') this._onBrowserLanguageChange();
        });
        // storage event to sync across tabs (explicit selection or explicit disable)
        window.addEventListener('storage', (e) => {
          if (e.key === 'selectedLang' || e.key === 'selectedLangExplicit' || e.key === 'langmgr_force_browser') {
            this._onStorageSync();
          }
        });
      }
    } catch (e) {}
  }

  // ---- Early init: do not depend on body/head being present ----
  async initializeEarly() {
    if (this._earlyInitialized) return;
    this._earlyInitialized = true;

    // Ensure prefetch started
    this._prefetchPromise = this._prefetchPromise || this.prefetchEnterprise();

    // Wait for config minimal (prefetch) so we can choose language and enforce attributes
    try {
      await this._prefetchPromise;
    } catch (e) {
      // continue even on prefetch error
    }

    // Determine chosen language quickly (use config if available)
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const langFromUrl = urlParams.get('lang');
      const storedLang = localStorage.getItem('selectedLang');
      const storedExplicit = !!localStorage.getItem('selectedLangExplicit');
      // If user forced browser-based behavior:
      if (localStorage.getItem('langmgr_force_browser') === '1') {
        // override explicit flag only if forced
      }
      const autoLang = this.detectBrowserLanguageStrict();
      const chosen =
        (langFromUrl && this.languagesConfig && this.languagesConfig[langFromUrl]) ? langFromUrl :
        (storedLang && this.languagesConfig && this.languagesConfig[storedLang]) ? storedLang :
        (autoLang && this.languagesConfig && this.languagesConfig[autoLang]) ? autoLang : (langFromUrl || storedLang || autoLang || 'en');

      // set selectedLang via setter -> will enforce attributes immediately
      // but only auto-apply auto-detected if user hasn't explicitly chosen (unless forced)
      if (storedExplicit && localStorage.getItem('langmgr_force_browser') !== '1') {
        // user explicitly chose earlier: honor it
        if (storedLang) this.selectedLang = storedLang;
        else this.selectedLang = chosen;
      } else {
        // no explicit previous selection: adopt chosen (which might be browser)
        this.selectedLang = chosen;
      }
    } catch (e) {
      try { this.selectedLang = this.detectBrowserLanguageStrict() || 'en'; } catch (e2) {}
    }

    // Start loading language data in background (do not await here)
    try {
      this.loadLanguageData(this.selectedLang).then(langData => {
        // If there are already [data-translate] elements parsed, attempt to translate them right away
        try {
          const els = Array.from(document.querySelectorAll && document.querySelectorAll('[data-translate]') || []);
          if (els.length && langData) {
            // translate currently-available nodes immediately
            this.parallelStreamingTranslate(langData, els).catch(()=>{});
          }
        } catch (e) {}
      }).catch(()=>{});
    } catch (e) {}
  }

  // ---- เพิ่ม helper สำหรับ enSource ----
  getEnSource() {
    if (
      this.languagesConfig &&
      this.languagesConfig.en &&
      typeof this.languagesConfig.en.enSource !== "undefined"
    ) {
      return this.languagesConfig.en.enSource === "json" ? "json" : "html";
    }
    return "html"; // default
  }

  // ---- Strict browser detection (only map to supported codes) ----
  detectBrowserLanguageStrict() {
    try {
      const browserLanguages = navigator.languages && navigator.languages.length ? navigator.languages : [(navigator.language || navigator.userLanguage || 'en')];
      for (const full of browserLanguages) {
        if (!full) continue;
        const normalized = full.replace('_', '-');
        // Try full locale first (e.g., en-US)
        if (this.languagesConfig && this.languagesConfig[normalized]) return normalized;
        // Try primary subtag (e.g., en)
        const primary = normalized.split('-')[0];
        if (this.languagesConfig && this.languagesConfig[primary]) return primary;
      }
    } catch (e) {}
    return null;
  }

  // ---- Called when browser language seems to have changed ----
  async _onBrowserLanguageChange() {
    // If we are forced to always follow browser, or user didn't explicitly pick, update
    try {
      const forced = localStorage.getItem('langmgr_force_browser') === '1';
      const explicit = !!localStorage.getItem('selectedLangExplicit');
      if (!this.allowAutoSwitchFromBrowser && !forced) return;
      const newBrowserLang = this.detectBrowserLanguageStrict();
      if (!newBrowserLang) return;
      // If user explicitly chose language, do not override unless forced
      if (explicit && !forced) return;
      if (newBrowserLang && newBrowserLang !== this.selectedLang) {
        // Update selectedLang immediately
        await this.updatePageLanguage(newBrowserLang, { updateHistory: false });
      }
    } catch (e) {}
  }

  // ---- Storage sync event handler across tabs ----
  async _onStorageSync() {
    try {
      const forced = localStorage.getItem('langmgr_force_browser') === '1';
      const explicit = !!localStorage.getItem('selectedLangExplicit');
      const storedLang = localStorage.getItem('selectedLang');
      if (storedLang && storedLang !== this.selectedLang) {
        // If stored explicit selection exists, adopt it
        if (explicit || !this.allowAutoSwitchFromBrowser) {
          await this.updatePageLanguage(storedLang, { updateHistory: false });
        } else {
          // if not explicit, we only adopt if forced or if browser says so
          if (forced) await this.updatePageLanguage(storedLang, { updateHistory: false });
        }
      } else {
        // maybe browser forced toggle
        if (!explicit || forced) {
          await this._onBrowserLanguageChange();
        }
      }
    } catch (e) {}
  }

  // ---- STRONGER language enforcement helper ----
  setEnforcedLang(language) {
    try {
      if (!language) {
        document.documentElement.removeAttribute('lang');
        document.documentElement.removeAttribute('xml:lang');
      }
    } catch (e) {}

    let locale = language;
    try {
      if (this.languagesConfig && this.languagesConfig[language] && this.languagesConfig[language].locale) {
        locale = this.languagesConfig[language].locale;
      } else {
        const map = {
          en: 'en-US', th: 'th-TH', es: 'es-ES', fr: 'fr-FR', de: 'de-DE', ja: 'ja-JP',
          ko: 'ko-KR', zh: 'zh-CN', 'zh-TW': 'zh-TW', ar: 'ar-SA', ru: 'ru-RU', pt: 'pt-BR'
        };
        if (map[language]) locale = map[language];
        if (!locale || locale.length === 2) {
          locale = (language || 'en').toLowerCase();
        }
      }
    } catch (e) {}

    try {
      const parts = (locale || '').replace('_', '-').split('-');
      if (parts.length === 1) {
        locale = parts[0].toLowerCase();
      } else {
        parts[0] = parts[0].toLowerCase();
        parts[1] = parts[1].toUpperCase();
        locale = parts.join('-');
      }
    } catch (e) {}

    try {
      document.documentElement.setAttribute('lang', locale);
      document.documentElement.setAttribute('xml:lang', locale);
      document.documentElement.setAttribute('data-lang-enforced', '1');
    } catch (e) {}
    try {
      if (document.body) {
        document.body.setAttribute('lang', locale);
      }
    } catch (e) {}

    try {
      let metaCL = document.head && document.head.querySelector ? document.head.querySelector('meta[http-equiv="Content-Language"][data-langmgr="1"]') : null;
      if (!metaCL && document.head) {
        Array.from(document.head.querySelectorAll('meta[http-equiv="Content-Language"]')).forEach(m => {
          if (m.getAttribute('data-langmgr') === '1') m.remove();
        });
        metaCL = document.createElement('meta');
        metaCL.setAttribute('http-equiv', 'Content-Language');
        metaCL.setAttribute('data-langmgr', '1');
        document.head.appendChild(metaCL);
      }
      if (metaCL) metaCL.setAttribute('content', locale);
    } catch (e) {}

    try {
      let metaLang = document.head && document.head.querySelector ? document.head.querySelector('meta[name="language"][data-langmgr="1"]') : null;
      if (!metaLang && document.head) {
        metaLang = document.createElement('meta');
        metaLang.setAttribute('name', 'language');
        metaLang.setAttribute('data-langmgr', '1');
        document.head.appendChild(metaLang);
      }
      if (metaLang) metaLang.setAttribute('content', locale);
    } catch (e) {}

    try {
      let dir = 'ltr';
      const rtlCodes = ['ar','he','fa','ur','ps','syr','dv'];
      if (this.languagesConfig && this.languagesConfig[language] && this.languagesConfig[language].dir) {
        dir = this.languagesConfig[language].dir;
      } else {
        const primary = (locale || '').split('-')[0];
        if (rtlCodes.indexOf(primary) !== -1) dir = 'rtl';
      }
      document.documentElement.setAttribute('dir', dir);
      if (document.body) document.body.setAttribute('dir', dir);
    } catch (e) {}

    try {
      const transEls = document.querySelectorAll ? document.querySelectorAll('[data-translate]') : [];
      Array.from(transEls).forEach(el => { try { el.setAttribute('lang', locale); } catch (e) {} });
      const slotEls = document.querySelectorAll ? document.querySelectorAll('[data-translate-slot],[data-slot]') : [];
      Array.from(slotEls).forEach(el => { try { el.setAttribute('lang', locale); } catch (e) {} });
    } catch (e) {}

    try {
      if (document.head) {
        Array.from(document.head.querySelectorAll('link[rel="alternate"][data-langmgr="1"]')).forEach(l => l.remove());
        if (this.languagesConfig) {
          Object.entries(this.languagesConfig).forEach(([code, cfg]) => {
            try {
              let hreflang = (cfg && cfg.locale) ? cfg.locale.split('-')[0].toLowerCase() : code.toLowerCase();
              if (cfg && cfg.locale && cfg.locale.indexOf('-') !== -1) hreflang = cfg.locale;
              const link = document.createElement('link');
              link.setAttribute('rel', 'alternate');
              link.setAttribute('data-langmgr', '1');
              link.setAttribute('hreflang', hreflang);
              const url = new URL(window.location.href);
              if (code === 'en') url.searchParams.delete('lang');
              else url.searchParams.set('lang', code);
              link.setAttribute('href', url.toString());
              document.head.appendChild(link);
            } catch (e) {}
          });
        }
      }
    } catch (e) {}
  }

  // ---- JSON version/hash/etag compare & update logic ----
  async fetchWithEtagOrHash(url, cacheKey, metaKey) {
    let cachedETag = await getMeta(metaKey + ":etag");
    let cachedHash = await getMeta(metaKey + ":hash");
    let cachedVersion = await getMeta(metaKey + ":version");
    let headers = {};
    if (cachedETag) headers['If-None-Match'] = cachedETag;
    if (cachedHash) headers['If-None-Match'] = cachedHash;
    let resp = await fetch(url, {
      headers,
      cache: "reload",
      priority: "high"
    });
    if (resp.status === 304) {
      return { updated: false };
    }
    let etag = resp.headers.get('ETag');
    let version = resp.headers.get('X-Version');
    let hash = resp.headers.get('X-Hash');
    let text = await resp.text();
    let body = text;
    let hashValue = hash;
    if (!hash && window.crypto && window.crypto.subtle) {
      const buf = new TextEncoder().encode(body);
      hashValue = await window.crypto.subtle.digest('SHA-256', buf)
        .then(hashBuf => Array.from(new Uint8Array(hashBuf)).map(x => x.toString(16).padStart(2, '0')).join(''));
    }
    if (
      (etag && etag === cachedETag) ||
      (version && version === cachedVersion) ||
      (hashValue && hashValue === cachedHash)
    ) {
      return { updated: false };
    }
    if (etag) await setMeta(metaKey + ":etag", etag);
    if (hashValue) await setMeta(metaKey + ":hash", hashValue);
    if (version) await setMeta(metaKey + ":version", version);
    return { updated: true, body, etag, version, hash: hashValue };
  }

  async prefetchEnterprise() {
    if (typeof document !== "undefined" && document.head) {
      ["//cdn.jsdelivr.net", "//fonts.googleapis.com"].forEach(href => {
        if (!document.head.querySelector(`link[href^="${href}"]`)) {
          const l = document.createElement("link");
          l.rel = "preconnect";
          l.href = href;
          l.crossOrigin = "anonymous";
          document.head.appendChild(l);
        }
      });
      if (!document.head.querySelector('link[rel="preload"][as="fetch"]')) {
        const preload = document.createElement("link");
        preload.rel = "preload";
        preload.as = "fetch";
        preload.href = "/assets/json/language.min.json";
        preload.crossOrigin = "anonymous";
        document.head.appendChild(preload);
      }
    }
    let config = null;
    const localConfigRaw = localStorage.getItem('__lang_cfg');
    const sessionConfigRaw = sessionStorage.getItem('__lang_cfg');
    if (localConfigRaw) try { config = JSON.parse(localConfigRaw); } catch {}
    if (!config && sessionConfigRaw) try { config = JSON.parse(sessionConfigRaw); } catch {}

    const url = '/assets/json/language.min.json';
    const metaKey = 'langcfg';
    let needUpdate = true;
    if (config) {
      try {
        const headResp = await fetch(url, { method: "HEAD" });
        let etag = headResp.headers.get('ETag');
        let version = headResp.headers.get('X-Version');
        let hash = headResp.headers.get('X-Hash');
        let cachedETag = await getMeta(metaKey + ":etag");
        let cachedHash = await getMeta(metaKey + ":hash");
        let cachedVersion = await getMeta(metaKey + ":version");
        if (
          (etag && etag === cachedETag) ||
          (version && version === cachedVersion) ||
          (hash && hash === cachedHash)
        ) {
          needUpdate = false;
        }
      } catch (e) {}
    }
    if (needUpdate) {
      let result = await this.fetchWithEtagOrHash(url, '__lang_cfg', metaKey);
      if (result.updated && result.body) {
        config = JSON.parse(result.body);
        localStorage.setItem('__lang_cfg', JSON.stringify(config));
        sessionStorage.setItem('__lang_cfg', JSON.stringify(config));
      } else if (!config) {
        config = await fetch(url).then(r => r.json()).catch(() => null);
        if (config) {
          localStorage.setItem('__lang_cfg', JSON.stringify(config));
          sessionStorage.setItem('__lang_cfg', JSON.stringify(config));
        }
      }
    }
    if (config) {
      this.languagesConfig = config;
    }
    // try to prepare button texts if DOM present
    try { this.prepareAllButtonTexts(); } catch (e) {}
  }

  async enterpriseLoadLang(lang) {
    if (this.languageCache[lang]) return this.languageCache[lang];

    const langKey = lang + "_v1";
    const metaKey = "lang_" + lang;
    let cacheData = await getLangCacheBatch([langKey]).then(resArr => resArr[0]);

    const url = `/assets/lang/${lang}.min.json`;
    let needUpdate = true;
    if (cacheData) {
      try {
        const headResp = await fetch(url, { method: "HEAD" });
        let etag = headResp.headers.get('ETag');
        let version = headResp.headers.get('X-Version');
        let hash = headResp.headers.get('X-Hash');
        let cachedETag = await getMeta(metaKey + ":etag");
        let cachedHash = await getMeta(metaKey + ":hash");
        let cachedVersion = await getMeta(metaKey + ":version");
        if (
          (etag && etag === cachedETag) ||
          (version && version === cachedVersion) ||
          (hash && hash === cachedHash)
        ) {
          needUpdate = false;
        }
      } catch (e) {}
    }
    let data = cacheData;
    if (needUpdate) {
      let result = await this.fetchWithEtagOrHash(url, langKey, metaKey);
      if (result.updated && result.body) {
        data = this.flattenLanguageJson(JSON.parse(result.body));
        await setLangCacheBatch([{ langKey, data }]);
      } else if (!data) {
        data = await fetch(url).then(r => r.json()).then(obj => this.flattenLanguageJson(obj)).catch(() => null);
        if (data) await setLangCacheBatch([{ langKey, data }]);
      }
    }
    if (data) this.languageCache[lang] = data;
    return data;
  }

  flattenLanguageJson(json) {
    const result = {};
    function recur(obj) {
      for (const [k, v] of Object.entries(obj)) {
        if (typeof v === 'object' && v !== null) recur(v);
        else result[k] = v;
      }
    }
    recur(json);
    return result;
  }

  // --- SVG + Text vertical alignment (gap 15px, SVG 19px) ---
  async prepareAllButtonTexts() {
    this.languageButton = document.getElementById('language-button');
    if (!this.languageButton || !this.languagesConfig) return;
    Array.from(this.languageButton.querySelectorAll('.lang-btn-txt, .lang-btn-svg')).forEach(e => e.remove());

    let flexWrap = this.languageButton.querySelector('.lang-btn-flex');
    if (!flexWrap) {
      flexWrap = document.createElement('span');
      flexWrap.className = 'lang-btn-flex';
      flexWrap.style.display = 'inline-flex';
      flexWrap.style.alignItems = 'center';
      flexWrap.style.gap = '15px';
      flexWrap.style.verticalAlign = 'middle';
      while (this.languageButton.firstChild) this.languageButton.removeChild(this.languageButton.firstChild);
      this.languageButton.appendChild(flexWrap);
    } else {
      flexWrap.innerHTML = '';
    }

    const svgWrap = document.createElement('span');
    svgWrap.className = 'lang-btn-svg';
    svgWrap.innerHTML = `<!--
category: Text
tags: [tongue, country, speech, speak, translate, communication, communicate, english, dialect, dictionary, word]
version: "1.5"
unicode: "ebbe"
-->
<svg
  xmlns="http://www.w3.org/2000/svg"
  width="18.5"
  height="18.5"
  viewBox="0 0 24 24"
  fill="none"
  stroke="#000000"
  stroke-width="1.25"
  stroke-linecap="round"
  stroke-linejoin="round"
>
  <path d="M4 5h7" />
  <path d="M9 3v2c0 4.418 -2.239 8 -5 8" />
  <path d="M5 9c0 2.144 2.952 3.908 6.7 4" />
  <path d="M12 20l4 -9l4 9" />
  <path d="M19.1 18h-6.2" />
</svg>
`;
    svgWrap.style.display = 'inline-flex';
    svgWrap.style.alignItems = 'center';
    svgWrap.style.justifyContent = 'center';

    flexWrap.appendChild(svgWrap);

    Object.entries(this.languagesConfig).forEach(([lang, config]) => {
      const span = document.createElement('span');
      span.className = 'lang-btn-txt';
      span.dataset.lang = lang;
      span.textContent = config.buttonText || 'Language';
      span.style.display = 'none';
      span.style.lineHeight = '1';
      flexWrap.appendChild(span);
    });
    this.showButtonTextForLang(this.selectedLang || 'en');
  }

  showButtonTextForLang(lang) {
    this.languageButton = document.getElementById('language-button');
    if (!this.languageButton) return;
    const flexWrap = this.languageButton.querySelector('.lang-btn-flex');
    if (!flexWrap) return;
    Array.from(flexWrap.querySelectorAll('.lang-btn-txt')).forEach(span => {
      span.style.display = (span.dataset.lang === lang) ? '' : 'none';
    });
  }
  updateLanguageSelectorUI() { this.initializeCustomLanguageSelector(); }

  // detectBrowserLanguage left for legacy compatibility but not used to guess from content
  detectBrowserLanguage() {
    if (!this.languagesConfig) return 'en';
    const browserLanguages = navigator.languages || [navigator.language || navigator.userLanguage];
    for (const lang of browserLanguages) {
      const langCode = lang.split('-')[0];
      if (this.languagesConfig[langCode]) return langCode;
    }
    return 'en';
  }

  async handleInitialLanguage() {
    // handleInitialLanguage now will rely on setter selectedLang to enforce attributes
    this.storeOriginalContent();
    const urlParams = new URLSearchParams(window.location.search);
    const langFromUrl = urlParams.get('lang');
    const storedLang = localStorage.getItem('selectedLang');
    let autoLang = this.detectBrowserLanguageStrict();
    this.selectedLang =
      (langFromUrl && this.languagesConfig[langFromUrl]) ? langFromUrl :
      (storedLang && this.languagesConfig[storedLang]) ? storedLang :
      (this.languagesConfig[autoLang] ? autoLang : 'en');

    this.showButtonTextForLang(this.selectedLang);
    if (this.selectedLang !== 'en' || this.getEnSource() === "json") {
      await this.updatePageLanguage(this.selectedLang, { updateHistory: false });
    }
  }
  async loadLanguagesConfig() {
    await this._prefetchPromise;
    if (!this.languagesConfig || !Object.keys(this.languagesConfig).length)
      throw new Error("Config ไม่ถูกต้องและโหลดใหม่ไม่ได้");
    await this.prepareAllButtonTexts();
    await this.handleInitialLanguage();
    this.updateLanguageSelectorUI();
  }
  async loadLanguageData(lang) { return await this.enterpriseLoadLang(lang); }

  async initialize() {
    if (this.isInitialized) return;
    try {
      // Finalize initialization that requires DOM (overlay, dropdown, mutation observer, etc.)
      await this.loadLanguagesConfig();
      this.observeMutations();
      this.setupNavigationHandlers();
      // ensure body/lang attributes are consistent
      try { this.setEnforcedLang(this.selectedLang); } catch (e) {}
      this.isInitialized = true;
      setTimeout(() => {
        if (document.body && document.body.style.opacity === "0") {
          document.body.style.transition = "opacity 0.28s cubic-bezier(.47,1.64,.41,.8)";
          document.body.style.opacity = "1";
        }
      }, 0);
    } catch (error) {
      console.error('Error during initialization:', error);
      this.showError('ไม่สามารถเริ่มต้นระบบได้');
      setTimeout(() => {
        if (document.body && document.body.style.opacity === "0") {
          document.body.style.opacity = "1";
        }
      }, 0);
    }
  }

  async updatePageLanguage(language, options = { updateHistory: true, explicit: false }) {
    if (this.isUpdatingLanguage) return;
    try {
      this.isUpdatingLanguage = true;
      this.lastSelectedLang = this.selectedLang;

      // set selectedLang via setter to enforce attributes early
      this.selectedLang = language;

      // If explicit flag passed (user chose), record in storage to avoid auto-overrides
      if (options.explicit) {
        try { localStorage.setItem('selectedLangExplicit', '1'); } catch (e) {}
        try { localStorage.setItem('selectedLang', language); } catch (e) {}
      } else {
        // not explicit: only update stored selectedLang if not explicit previously
        const alreadyExplicit = !!localStorage.getItem('selectedLangExplicit');
        if (!alreadyExplicit) {
          try { localStorage.setItem('selectedLang', language); } catch (e) {}
        }
      }

      // --- ปรับปรุง: ภาษาอังกฤษรองรับ enSource ---
      if (language === 'en') {
        if (this.getEnSource() === "json") {
          const languageData = await this.loadLanguageData("en");
          if (languageData) {
            await this.parallelStreamingTranslate(languageData);
          } else {
            await this.resetToEnglishContent();
          }
        } else {
          await this.resetToEnglishContent();
        }
      } else {
        const languageData = await this.loadLanguageData(language);
        if (languageData) {
          await this.parallelStreamingTranslate(languageData);
        } else {
          await this.resetToEnglishContent();
        }
      }

      this.showButtonTextForLang(this.selectedLang);
      if (options.updateHistory) this.updateURLAndHistory(language);
      if (options.explicit) localStorage.setItem('selectedLang', language);
    } catch (error) {
      console.error('Error updating page language:', error);
      this.showError('เกิดข้อผิดพลาดในการเปลี่ยนภาษา');
      await this.resetToEnglishContent();
    } finally {
      this.isUpdatingLanguage = false;
    }
  }

  updateURLAndHistory(language) {
    const url = new URL(window.location.href);
    if (language === 'en') url.searchParams.delete('lang');
    else url.searchParams.set('lang', language);
    const newUrl = url.toString();
    if (newUrl === window.location.href) return;
    const state = { language, lastLanguage: this.lastSelectedLang, timestamp: Date.now() };
    history.replaceState(state, '', newUrl);
  }
  setupNavigationHandlers() {
    window.addEventListener('popstate', async (event) => {
      if (this.isLanguageDropdownOpen) await this.closeLanguageDropdown();
      if (this.isNavigating) return;
      this.isNavigating = true;
      try {
        const storedLang = localStorage.getItem('selectedLang') || 'en';
        if (storedLang !== this.selectedLang) {
          await this.updatePageLanguage(storedLang, { updateHistory: false });
        }
      } finally {
        this.isNavigating = false;
      }
    });
  }

  async parallelStreamingTranslate(languageData, elements) {
    const elList = elements || Array.from(document.querySelectorAll('[data-translate]'));
    if (!elList.length) return;
    const chunkSize = Math.max(8, Math.ceil(elList.length / this.maxWorker));
    const batches = [];
    const nodeMeta = [];
    for (let i = 0; i < elList.length; i += chunkSize) {
      const batch = elList.slice(i, i + chunkSize);
      batches.push(batch);
      nodeMeta.push(batch.map(el => ({
        key: el.getAttribute('data-translate')
      })));
    }
    const jobs = nodeMeta.map((meta, i) =>
      this.workerPool.execute({ nodes: meta, langData: languageData, batchIdx: i })
    );
    const results = await Promise.all(jobs);
    for (let j = 0; j < results.length; ++j) {
      const batch = batches[j], resArr = results[j].result;
      for (let k = 0; k < resArr.length; ++k) {
        const el = batch[resArr[k].idx];
        if (!el) continue;
        const parts = resArr[k].parts;
        this._replaceDOMWithMarkerReplace(el, parts);
        try { el.setAttribute('lang', document.documentElement.getAttribute('lang') || ''); } catch(e){}
      }
    }
  }

  _replaceDOMWithMarkerReplace(el, parts) {
    // Normalize parts to group contiguous text/html
    const normalized = [];
    let buffer = '';
    let bufferHasHtml = false;
    const pushBuffer = () => {
      if (!buffer) return;
      if (bufferHasHtml) normalized.push({ type: 'html', html: buffer });
      else normalized.push({ type: 'text', text: buffer });
      buffer = '';
      bufferHasHtml = false;
    };
    for (let i = 0; i < parts.length; i++) {
      const p = parts[i];
      if (p.type === 'text' || p.type === 'html') {
        if (!buffer) {
          buffer = (p.type === 'text') ? (p.text || '') : (p.html || '');
          bufferHasHtml = (p.type === 'html') || /<[^>]+>/.test(buffer);
        } else {
          buffer += (p.type === 'text') ? (p.text || '') : (p.html || '');
          if (p.type === 'html' || /<[^>]+>/.test(buffer)) bufferHasHtml = true;
        }
      } else {
        pushBuffer();
        normalized.push(p);
      }
    }
    pushBuffer();

    // Build newNodes array; svg/lsvg and slot markers become special objects
    const newNodes = [];
    const domParser = new DOMParser();
    let containsExplicitSvgOrLsvg = false;
    normalized.forEach(p => {
      if (p.type === 'text') {
        newNodes.push(document.createTextNode(p.text));
      } else if (p.type === 'html') {
        const htmlStr = (p.html || '').trim();
        if (!htmlStr) return;
        if (/\<svg[\s>]/i.test(htmlStr)) {
          try {
            const svgDoc = domParser.parseFromString(htmlStr, 'image/svg+xml');
            const svgRoot = svgDoc.documentElement && svgDoc.documentElement.nodeName !== 'parsererror' ? svgDoc.documentElement : null;
            if (svgRoot) {
              newNodes.push(document.importNode(svgRoot, true));
              containsExplicitSvgOrLsvg = true;
              return;
            }
          } catch (e) {}
        }
        const template = document.createElement('template');
        template.innerHTML = htmlStr;
        const frag = template.content.cloneNode(true);
        Array.from(frag.childNodes).forEach(n => newNodes.push(n));
      } else if (p.type === 'svg') {
        newNodes.push({ __svgMarker: true, id: p.id || null });
        containsExplicitSvgOrLsvg = true;
      } else if (p.type === 'lsvg') {
        newNodes.push({ __svgMarker: true, lsvg: true, id: p.id || null });
        containsExplicitSvgOrLsvg = true;
      } else if (p.type === 'slot') {
        newNodes.push({ __slotMarker: true, name: p.name || null });
      } else {
        newNodes.push(this._createMarkerNode(p));
      }
    });

    const existingSvgsAll = Array.from(el.querySelectorAll ? el.querySelectorAll('svg') : []).slice();
    if (!containsExplicitSvgOrLsvg && existingSvgsAll.length > 0) {
      newNodes.unshift({ __svgMarker: true, lsvg: true, id: null, __predicted: true });
    }

    const existing = Array.from(el.childNodes);
    const existingSvgs = existingSvgsAll.slice();
    const existingSlotsAll = Array.from(el.querySelectorAll ? el.querySelectorAll('[data-translate-slot],[data-slot]') : []).slice();
    const usedSvgs = new Set();
    const usedSlots = new Set();
    const existingAnchorsAll = Array.from(el.querySelectorAll ? el.querySelectorAll('a') : []).slice();
    const usedAnchors = new Set();

    const resolveSvgMarkerGlobal = (id) => {
      if (id) {
        for (let s of existingSvgs) {
          if (usedSvgs.has(s)) continue;
          if ((s.getAttribute && s.getAttribute('id') === id) || (s.getAttribute && s.getAttribute('data-svg-id') === id) || (s.dataset && s.dataset.svgId === id)) {
            usedSvgs.add(s);
            return s;
          }
        }
      }
      const available = existingSvgs.filter(s => !usedSvgs.has(s));
      if (available.length >= 1) {
        usedSvgs.add(available[0]);
        return available[0];
      }
      return null;
    };

    const resolveSlotMarkerGlobal = (name) => {
      if (name) {
        for (let s of existingSlotsAll) {
          if (usedSlots.has(s)) continue;
          if ((s.getAttribute && s.getAttribute('data-translate-slot') === name) ||
              (s.getAttribute && s.getAttribute('data-slot') === name) ||
              (s.dataset && (s.dataset.translateSlot === name || s.dataset.slot === name))) {
            usedSlots.add(s);
            return s;
          }
        }
      }
      const available = existingSlotsAll.filter(s => !usedSlots.has(s));
      if (!name && available.length === 1) {
        usedSlots.add(available[0]);
        return available[0];
      }
      return null;
    };

    const resolveAnchorMarkerGlobal = (newNode) => {
      const id = (newNode && newNode.getAttribute && newNode.getAttribute('id')) || (newNode && newNode.dataset && newNode.dataset.id) || null;
      if (id) {
        for (let a of existingAnchorsAll) {
          if (usedAnchors.has(a)) continue;
          if ((a.getAttribute && a.getAttribute('id') === id) || (a.getAttribute && a.getAttribute('data-anchor-id') === id) || (a.dataset && (a.dataset.anchorId === id || a.dataset.id === id))) {
            usedAnchors.add(a);
            return a;
          }
        }
      }
      const available = existingAnchorsAll.filter(a => !usedAnchors.has(a));
      if (available.length >= 1) {
        usedAnchors.add(available[0]);
        return available[0];
      }
      return null;
    };

    let readIndex = 0;
    for (let i = 0; i < newNodes.length; i++) {
      const newNode = newNodes[i];
      let currentOld = existing[readIndex];

      if (newNode && newNode.__slotMarker) {
        const slotEl = resolveSlotMarkerGlobal(newNode.name);
        if (slotEl) {
          if (currentOld !== slotEl) {
            try { el.insertBefore(slotEl, currentOld || null); } catch (e) {}
            existing.splice(existing.indexOf(slotEl), 1);
            existing.splice(readIndex, 0, slotEl);
            currentOld = existing[readIndex];
          }
          readIndex++;
          continue;
        } else {
          const span = document.createElement('span');
          if (newNode.name) {
            try { span.setAttribute('data-translate-slot', newNode.name); } catch(e){}
          } else {
            try { span.setAttribute('data-translate-slot', 'slot'); } catch(e){}
          }
          if (currentOld) el.insertBefore(span, currentOld);
          else el.appendChild(span);
          existing.splice(readIndex, 0, span);
          readIndex++;
          continue;
        }
      }

      if (newNode && newNode.__svgMarker) {
        const svgRef = resolveSvgMarkerGlobal(newNode.id);
        if (svgRef) {
          if (newNode.__predicted) {
            try {
              if (el.firstChild !== svgRef) {
                el.insertBefore(svgRef, el.firstChild);
              }
              const idxOld = existing.indexOf(svgRef);
              if (idxOld !== -1) {
                existing.splice(idxOld, 1);
                existing.splice(0, 0, svgRef);
              }
              if (readIndex === 0) {
                readIndex = 1;
              } else {}
            } catch (e) {}
            continue;
          }
          if (currentOld !== svgRef) {
            try { el.insertBefore(svgRef, currentOld || null); } catch (e) {}
            const prevIdx = existing.indexOf(svgRef);
            if (prevIdx !== -1) existing.splice(prevIdx, 1);
            existing.splice(readIndex, 0, svgRef);
            currentOld = existing[readIndex];
          }
          readIndex++;
          continue;
        } else {
          const ns = "http://www.w3.org/2000/svg";
          const createdSvg = document.createElementNS(ns, 'svg');
          if (newNode.id) {
            try { createdSvg.setAttribute('id', newNode.id); createdSvg.setAttribute('data-svg-id', newNode.id); } catch(e){}
          }
          if (newNode.__predicted) {
            if (el.firstChild) el.insertBefore(createdSvg, el.firstChild);
            else el.appendChild(createdSvg);
            existing.splice(0, 0, createdSvg);
            if (readIndex === 0) readIndex = 1;
            continue;
          } else {
            if (currentOld) el.insertBefore(createdSvg, currentOld);
            else el.appendChild(createdSvg);
            existing.splice(readIndex, 0, createdSvg);
            readIndex++;
            continue;
          }
        }
      }

      if (newNode && newNode.nodeType === 1 && newNode.tagName && newNode.tagName.toLowerCase() === 'a') {
        const anchorRef = resolveAnchorMarkerGlobal(newNode);
        if (anchorRef) {
          if (currentOld !== anchorRef) {
            try { el.insertBefore(anchorRef, currentOld || null); } catch (e) {}
            const prevIdx = existing.indexOf(anchorRef);
            if (prevIdx !== -1) existing.splice(prevIdx, 1);
            existing.splice(readIndex, 0, anchorRef);
            currentOld = existing[readIndex];
          }
          try {
            if (newNode.textContent != null && newNode.textContent !== '') {
              if (anchorRef.textContent !== newNode.textContent) anchorRef.textContent = newNode.textContent;
            }
            const newAttrs = Array.from(newNode.attributes || []);
            newAttrs.forEach(a => { try { anchorRef.setAttribute(a.name, a.value); } catch(e){} });
            try { anchorRef.setAttribute('lang', document.documentElement.getAttribute('lang') || ''); } catch(e){}
          } catch (e) {}
          readIndex++;
          continue;
        } else {
          if (currentOld) el.insertBefore(document.importNode(newNode, true), currentOld);
          else el.appendChild(document.importNode(newNode, true));
          existing.splice(readIndex, 0, el.childNodes[readIndex]);
          readIndex++;
          continue;
        }
      }

      if (currentOld) {
        if (currentOld.nodeType === Node.TEXT_NODE && newNode.nodeType === Node.TEXT_NODE) {
          if (currentOld.textContent !== newNode.textContent) currentOld.textContent = newNode.textContent;
          readIndex++;
          continue;
        }

        if (currentOld.nodeType === 1 && newNode.nodeType === 1) {
          try {
            if (currentOld.tagName === newNode.tagName) {
              while (currentOld.firstChild) currentOld.removeChild(currentOld.firstChild);
              Array.from(newNode.childNodes).forEach(c => currentOld.appendChild(document.importNode(c, true)));
              const newAttrs = Array.from(newNode.attributes || []);
              const oldAttrs = Array.from(currentOld.attributes || []);
              newAttrs.forEach(a => { try { currentOld.setAttribute(a.name, a.value); } catch(e){} });
              oldAttrs.forEach(a => {
                if (!newNode.hasAttribute(a.name)) { try { currentOld.removeAttribute(a.name); } catch(e){} }
              });
              try { currentOld.setAttribute('lang', document.documentElement.getAttribute('lang') || ''); } catch(e){}
              readIndex++;
              continue;
            }
          } catch (e) {}
        }

        if (currentOld.nodeType === 1 && currentOld.tagName && currentOld.tagName.toLowerCase() === 'svg') {
          readIndex++;
          i--;
          continue;
        }

        if (currentOld.nodeType === 1 && (currentOld.hasAttribute && (currentOld.hasAttribute('data-translate-slot') || currentOld.hasAttribute('data-slot')))) {
          readIndex++;
          i--;
          continue;
        }

        try {
          el.replaceChild(document.importNode(newNode, true), currentOld);
          existing[readIndex] = el.childNodes[readIndex];
          try { el.childNodes[readIndex].setAttribute && el.childNodes[readIndex].setAttribute('lang', document.documentElement.getAttribute('lang') || ''); } catch(e){}
          readIndex++;
          continue;
        } catch (e) {
          try {
            el.insertBefore(document.importNode(newNode, true), currentOld);
            el.removeChild(currentOld);
            existing[readIndex] = el.childNodes[readIndex];
            try { el.childNodes[readIndex].setAttribute && el.childNodes[readIndex].setAttribute('lang', document.documentElement.getAttribute('lang') || ''); } catch(e){}
            readIndex++;
            continue;
          } catch (e2) {
            readIndex++;
            continue;
          }
        }
      } else {
        try {
          el.appendChild(document.importNode(newNode, true));
          existing.push(el.lastChild);
          try { el.lastChild.setAttribute && el.lastChild.setAttribute('lang', document.documentElement.getAttribute('lang') || ''); } catch(e){}
        } catch (e) {
          try { el.appendChild(newNode.cloneNode(true)); existing.push(el.lastChild); try { el.lastChild.setAttribute && el.lastChild.setAttribute('lang', document.documentElement.getAttribute('lang') || ''); } catch(e){} } catch (e2) {}
        }
        readIndex++;
        continue;
      }
    }

    for (let j = el.childNodes.length - 1; j >= readIndex; j--) {
      const node = el.childNodes[j];
      if (!node) continue;
      if (node.nodeType === 1 && node.tagName && node.tagName.toLowerCase() === 'svg') {
        continue;
      }
      if (node.nodeType === 1 && (node.hasAttribute && (node.hasAttribute('data-translate-slot') || node.hasAttribute('data-slot')))) {
        continue;
      }
      try { el.removeChild(node); } catch(e){}
    }
  }

  _createMarkerNode(marker) {
    if (marker.type === 'text') {
      return document.createTextNode(marker.text);
    } else if (marker.type === 'a') {
      const a = document.createElement('a');
      if (marker.translate) a.textContent = marker.text;
      try { a.setAttribute('lang', document.documentElement.getAttribute('lang') || ''); } catch(e){}
      return a;
    } else if (marker.type === 'br') {
      return document.createElement('br');
    } else if (marker.type === 'strong') {
      const s = document.createElement('strong');
      s.textContent = marker.text;
      try { s.setAttribute('lang', document.documentElement.getAttribute('lang') || ''); } catch(e){}
      return s;
    } else if (marker.type === 'html') {
      const template = document.createElement('template');
      template.innerHTML = marker.html || '';
      const frag = template.content.cloneNode(true);
      try {
        Array.from(frag.querySelectorAll && frag.querySelectorAll('*') || []).forEach(n => {
          try { n.setAttribute && n.setAttribute('lang', document.documentElement.getAttribute('lang') || ''); } catch(e){}
        });
      } catch (e){}
      return frag;
    }
    return document.createTextNode('');
  }

  // ----------- UI/UX unchanged below -----------
  initializeCustomLanguageSelector() {
    const container = document.getElementById('language-selector-container');
    this.languageButton = document.getElementById('language-button');
    if (!this.languageButton) return;
    this.prepareAllButtonTexts();
    this.showButtonTextForLang(this.selectedLang || 'en');
    if (this.languageOverlay && this.languageOverlay.parentElement) {
      this.languageOverlay.parentElement.removeChild(this.languageOverlay);
      this.languageOverlay = null;
    }
    if (this.languageDropdown && this.languageDropdown.parentElement) {
      this.languageDropdown.parentElement.removeChild(this.languageDropdown);
      this.languageDropdown = null;
    }
    this.languageOverlay = document.createElement('div');
    this.languageOverlay.id = 'language-overlay';
    document.body.appendChild(this.languageOverlay);
    this.languageDropdown = document.createElement('div');
    this.languageDropdown.id = 'language-dropdown';
    this.languageDropdown.innerHTML = '';
    this.populateLanguageDropdown();
    document.body.appendChild(this.languageDropdown);
    this.setupEventListeners();
    this.setupDropdownScrollLock();
  }
  populateLanguageDropdown() {
    const fragment = document.createDocumentFragment();
    Object.entries(this.languagesConfig).forEach(([lang, config]) => {
      const option = document.createElement('div');
      option.className = 'language-option';
      option.textContent = config.label;
      option.dataset.language = lang;
      fragment.appendChild(option);
    });
    this.languageDropdown.innerHTML = '';
    this.languageDropdown.appendChild(fragment);
  }
  setupEventListeners() {
    if (!this.languageButton) return;
    this.languageButton.onclick = () => this.toggleLanguageDropdown();
    this.languageOverlay.onclick = () => this.closeLanguageDropdown();
    this.languageDropdown.onclick = (e) => {
      const option = e.target.closest('.language-option');
      if (option) {
        const lang = option.dataset.language;
        if (lang) {
          // treat as explicit user selection
          this.selectLanguage(lang);
        }
      }
    };
  }
  setupDropdownScrollLock() {
    if (!this.languageDropdown) return;
    this.languageDropdown.removeEventListener('wheel', this._dropdownWheelListener, { passive: false });
    this.languageDropdown.removeEventListener('touchstart', this._dropdownTouchStartListener);
    this.languageDropdown.removeEventListener('touchmove', this._dropdownTouchMoveListener, { passive: false });
    this._dropdownWheelListener = (e) => {
      const el = this.languageDropdown;
      const delta = e.deltaY;
      const atTop = el.scrollTop === 0;
      const atBottom = el.scrollTop + el.clientHeight >= el.scrollHeight - 1;
      if ((atTop && delta < 0) || (atBottom && delta > 0)) e.preventDefault();
      e.stopPropagation();
    };
    this.languageDropdown.addEventListener('wheel', this._dropdownWheelListener, { passive: false });
    let lastY = 0;
    this._dropdownTouchStartListener = (e) => {
      if (e.touches.length === 1) lastY = e.touches[0].clientY;
    };
    this._dropdownTouchMoveListener = (e) => {
      if (e.touches.length !== 1) return;
      const el = this.languageDropdown;
      const currentY = e.touches[0].clientY;
      const delta = lastY - currentY;
      lastY = currentY;
      const atTop = el.scrollTop === 0;
      const atBottom = el.scrollTop + el.clientHeight >= el.scrollHeight - 1;
      if ((atTop && delta < 0) || (atBottom && delta > 0)) e.preventDefault();
      e.stopPropagation();
    };
    this.languageDropdown.addEventListener('touchstart', this._dropdownTouchStartListener);
    this.languageDropdown.addEventListener('touchmove', this._dropdownTouchMoveListener, { passive: false });
  }
  toggleLanguageDropdown() {
    this.isLanguageDropdownOpen ? this.closeLanguageDropdown() : this.openLanguageDropdown();
  }
  async openLanguageDropdown() {
    if (this.isLanguageDropdownOpen) return;
    this.scrollPosition = window.scrollY || window.pageYOffset || document.documentElement.scrollTop || 0;
    this.isLanguageDropdownOpen = true;
    this.languageOverlay.style.display = 'block';
    this.languageDropdown.style.display = 'block';
    document.body.style.position = 'fixed';
    document.body.style.left = '0';
    document.body.style.right = '0';
    document.body.style.overflowY = 'scroll';
    document.body.style.top = `-${this.scrollPosition}px`;
    document.body.classList.add('scroll-lock');
    return new Promise(resolve => {
      requestAnimationFrame(() => {
        this.languageOverlay.classList.add('fade-in');
        this.languageDropdown.classList.add('fade-in');
        setTimeout(resolve, this.FADE_DURATION);
      });
    });
  }
  async closeLanguageDropdown() {
    if (!this.isLanguageDropdownOpen) return;
    const dropdownResetDelay = 80;
    return new Promise(resolve => {
      this.isLanguageDropdownOpen = false;
      this.languageOverlay.classList.remove('fade-in');
      this.languageDropdown.classList.remove('fade-in');
      this.languageOverlay.classList.add('fade-out');
      this.languageDropdown.classList.add('fade-out');
      document.body.classList.remove('scroll-lock');
      document.body.style.position = '';
      document.body.style.left = '';
      document.body.style.right = '';
      document.body.style.overflowY = '';
      document.body.style.top = '';
      window.scrollTo(0, this.scrollPosition);
      setTimeout(() => {
        if (this.languageDropdown) {
          this.languageDropdown.scrollTop = 0;
          this.languageDropdown.scrollLeft = 0;
        }
      }, this.FADE_DURATION - dropdownResetDelay);
      setTimeout(() => {
        this.languageOverlay.style.display = 'none';
        this.languageDropdown.style.display = 'none';
        this.languageOverlay.classList.remove('fade-out');
        this.languageDropdown.classList.remove('fade-out');
        resolve();
      }, this.FADE_DURATION);
    });
  }
  async selectLanguage(language) {
    if (!this.languagesConfig[language]) {
      console.warn(`ไม่รองรับภาษา: ${language} กำลังใช้ภาษาอังกฤษแทน`);
      language = 'en';
    }
    if (this.selectedLang === language && !this.isNavigating) {
      await this.closeLanguageDropdown();
      return;
    }
    this.lastSelectedLang = this.selectedLang;
    // mark as explicit selection
    await this.updatePageLanguage(language, { explicit: true });
    // persist explicit flag across tabs
    try { localStorage.setItem('selectedLangExplicit', '1'); } catch(e){}
    await this.closeLanguageDropdown();
  }
  storeOriginalContent() {
    document.querySelectorAll('[data-translate]').forEach(el => {
      if (!el.hasAttribute('data-original-text')) {
        el.setAttribute('data-original-text', el.textContent.trim());
      }
      if (!el.hasAttribute('data-original-style')) {
        el.setAttribute('data-original-style', el.style.cssText);
      }
    });
  }
  async resetToEnglishContent() {
    const elements = document.querySelectorAll('[data-translate]');
    const resetPromises = Array.from(elements).map(el => new Promise(resolve => {
      requestAnimationFrame(() => {
        const originalText = el.getAttribute('data-original-text');
        const originalStyle = el.getAttribute('data-original-style');
        if (originalText) {
          const workerCode = `
            function splitMarkersAndHtml(str) {
              const htmlSplit = str.split(/(<\\/?.+?>)/g);
              const parts = [];
              const markerRegex = /(@lsvg(?::([^@]+))?@)|(@svg(?::([^@]+))?@)|(@slot:([^@]+)@)|(@a(.*?)@)|(@br)|(@strong(.*?)@)/g;
              for (let segment of htmlSplit) {
                if (!segment) continue;
                if (/^<\\/?.+?>$/.test(segment)) {
                  parts.push({ type: 'html', html: segment });
                } else {
                  let lastIndex = 0;
                  let m;
                  while ((m = markerRegex.exec(segment)) !== null) {
                    if (m.index > lastIndex) {
                      parts.push({ type: 'text', text: segment.slice(lastIndex, m.index)});
                    }
                    if (m[1]) {
                      const id = m[2] || null;
                      parts.push({ type: 'lsvg', id });
                    } else if (m[3]) {
                      const id = m[4] || null;
                      parts.push({ type: 'svg', id });
                    } else if (m[5]) {
                      const name = m[6] || null;
                      parts.push({ type: 'slot', name });
                    } else if (m[7]) {
                      const inner = m[8] || '';
                      parts.push({ type: 'a', translate: inner !== "", text: inner });
                    } else if (m[9]) {
                      parts.push({ type: 'br' });
                    } else if (m[10]) {
                      const s = m[11] || '';
                      parts.push({ type: 'strong', text: s });
                    }
                    lastIndex = markerRegex.lastIndex;
                  }
                  if (lastIndex < segment.length) {
                    parts.push({ type: 'text', text: segment.slice(lastIndex) });
                  }
                }
              }
              return parts;
            }
            self.onmessage = function(e) {
              self.postMessage(splitMarkersAndHtml(e.data));
            }
          `;
          let w = new Worker(URL.createObjectURL(new Blob([workerCode], {type: 'application/javascript'})));
          w.onmessage = e => {
            this._replaceDOMWithMarkerReplace(el, e.data);
            w.terminate();
            resolve();
          };
          w.postMessage(originalText);
        } else {
          resolve();
        }
        if (originalStyle) {
          el.style.cssText = originalStyle;
        }
        try { el.setAttribute('lang', document.documentElement.getAttribute('lang') || ''); } catch(e){}
      });
    }));
    await Promise.all(resetPromises);
  }
  showError(message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'language-error';
    errorDiv.textContent = message;
    Object.assign(errorDiv.style, {
      position: 'fixed',
      top: '20px',
      right: '20px',
      backgroundColor: '#ff4444',
      color: 'white',
      padding: '10px 20px',
      borderRadius: '4px',
      zIndex: '9999',
      opacity: '0',
      transition: 'opacity 0.3s ease'
    });
    document.body.appendChild(errorDiv);
    requestAnimationFrame(() => {
      errorDiv.style.opacity = '1';
      setTimeout(() => {
        errorDiv.style.opacity = '0';
        setTimeout(() => errorDiv.remove(), this.FADE_DURATION);
      }, 3000);
    });
  }
  observeMutations() {
    if (this.mutationObserver) { this.mutationObserver.disconnect(); }
    this.mutationObserver = new MutationObserver((mutations) => {
      if (this.mutationThrottleTimeout) return;
      this.mutationThrottleTimeout = setTimeout(() => {
        let needsUpdate = false, added = [];
        mutations.forEach(mutation => {
          if (mutation.type === 'childList') {
            mutation.addedNodes.forEach(node => {
              if (node.nodeType === Node.ELEMENT_NODE) {
                const translatableElements = node.querySelectorAll('[data-translate]');
                if (translatableElements.length > 0) {
                  needsUpdate = true;
                  added.push(...translatableElements);
                  translatableElements.forEach(el => {
                    if (!el.hasAttribute('data-original-text')) {
                      el.setAttribute('data-original-text', el.textContent.trim());
                    }
                  });
                }
              }
            });
          }
        });
        if (needsUpdate && (this.selectedLang !== 'en' || this.getEnSource() === "json")) {
          this.parallelStreamingTranslate(this.languageCache[this.selectedLang], added);
        }
        this.mutationThrottleTimeout = null;
      }, 1);
    });
    this.mutationObserver.observe(document.body, { childList: true, subtree: true });
  }
  destroy() {
    if (this.languageOverlay) this.languageOverlay.remove();
    if (this.languageDropdown) this.languageDropdown.remove();
    if (this.mutationObserver) this.mutationObserver.disconnect();
    this.languageCache = {};
    this.isInitialized = false;
    this.isLanguageDropdownOpen = false;
    this.isUpdatingLanguage = false;
    this.isNavigating = false;
    if (this.workerPool) this.workerPool.destroy();
  }
}

const languageManager = new LanguageManager();
window.languageManager = languageManager;
if (typeof module !== 'undefined' && module.exports) module.exports = languageManager;