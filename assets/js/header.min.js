// Minimal bootstrap/loader — เชื่อมต่อโมดูลทั้งหมดเป็นศูนย์กลาง
(function() {
    // โฟลเดอร์ที่เก็บโมดูล relative to this file
    const MODULE_BASE = './header-modules/';
    
    // รายการโมดูลหลัก
    const MODULES = [
        'overlay.js',
        'utils.js',
        'dataManager.js',
        'contentLoadingManager.js',
        'contentManager.js',
        'managers.js', // scroll, performance, navigation, subNav, button (รวมกันเพื่อลด circular complexity)
        'unifiedCopyToClipboard.js',
        'init.js' // สุดท้าย: ใช้เชื่อมต่อทุกตัวและ initialize
    ];
    
    async function loadAll() {
        try {
            // dynamic import ของแต่ละโมดูล (parallel)
            const imports = MODULES.map(m => import(MODULE_BASE + m));
            const mods = await Promise.all(imports);
            // export ของแต่ละโมดูล จะถูกรวมและ init module จะทำการเชื่อมต่อบน window
            // เรียก init (ถ้ามี)
            const init = mods.find(m => m && m.init) || mods[mods.length - 1];
            if (init && typeof init.init === 'function') {
                await init.init();
            } else if (typeof window.headerV2_initializeApp === 'function') {
                await window.headerV2_initializeApp();
            }
        } catch (err) {
            console.error('header.min.js bootstrap error', err);
            try {
                // ถ้ามีฟังก์ชันแจ้งเตือนเรียบง่าย
                if (window._headerV2_utils && window._headerV2_utils.showNotification) {
                    window._headerV2_utils.showNotification('โหลด header modules ไม่สำเร็จ', 'error');
                }
            } catch {}
        } finally {
            // ลบ overlay ถ้ามี
            try {
                if (typeof window.__removeInstantLoadingOverlay === 'function' && window.__instantLoadingOverlayShown) {
                    window.__removeInstantLoadingOverlay();
                    window.__instantLoadingOverlayShown = false;
                }
            } catch {}
        }
    }
    
    // kick off
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', loadAll);
    } else {
        loadAll();
    }
})();